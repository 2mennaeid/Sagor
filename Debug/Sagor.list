
Sagor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031fc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800330c  0800330c  0001330c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800334c  0800334c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800334c  0800334c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800334c  0800334c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800334c  0800334c  0001334c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003350  08003350  00013350  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003354  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  2000000c  08003360  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c8  08003360  000200c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   000086b8  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000186d  00000000  00000000  00028730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000788  00000000  00000000  00029fa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005b7  00000000  00000000  0002a728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016a8d  00000000  00000000  0002acdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a154  00000000  00000000  0004176c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008a2b4  00000000  00000000  0004b8c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001e80  00000000  00000000  000d5b74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000041  00000000  00000000  000d79f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000000c 	.word	0x2000000c
 800012c:	00000000 	.word	0x00000000
 8000130:	080032f4 	.word	0x080032f4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000010 	.word	0x20000010
 800014c:	080032f4 	.word	0x080032f4

08000150 <__aeabi_fmul>:
 8000150:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000154:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000158:	bf1e      	ittt	ne
 800015a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015e:	ea92 0f0c 	teqne	r2, ip
 8000162:	ea93 0f0c 	teqne	r3, ip
 8000166:	d06f      	beq.n	8000248 <__aeabi_fmul+0xf8>
 8000168:	441a      	add	r2, r3
 800016a:	ea80 0c01 	eor.w	ip, r0, r1
 800016e:	0240      	lsls	r0, r0, #9
 8000170:	bf18      	it	ne
 8000172:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000176:	d01e      	beq.n	80001b6 <__aeabi_fmul+0x66>
 8000178:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800017c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000180:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000184:	fba0 3101 	umull	r3, r1, r0, r1
 8000188:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800018c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000190:	bf3e      	ittt	cc
 8000192:	0049      	lslcc	r1, r1, #1
 8000194:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000198:	005b      	lslcc	r3, r3, #1
 800019a:	ea40 0001 	orr.w	r0, r0, r1
 800019e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001a2:	2afd      	cmp	r2, #253	; 0xfd
 80001a4:	d81d      	bhi.n	80001e2 <__aeabi_fmul+0x92>
 80001a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001aa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001ae:	bf08      	it	eq
 80001b0:	f020 0001 	biceq.w	r0, r0, #1
 80001b4:	4770      	bx	lr
 80001b6:	f090 0f00 	teq	r0, #0
 80001ba:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001be:	bf08      	it	eq
 80001c0:	0249      	lsleq	r1, r1, #9
 80001c2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001ca:	3a7f      	subs	r2, #127	; 0x7f
 80001cc:	bfc2      	ittt	gt
 80001ce:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001d2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d6:	4770      	bxgt	lr
 80001d8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001dc:	f04f 0300 	mov.w	r3, #0
 80001e0:	3a01      	subs	r2, #1
 80001e2:	dc5d      	bgt.n	80002a0 <__aeabi_fmul+0x150>
 80001e4:	f112 0f19 	cmn.w	r2, #25
 80001e8:	bfdc      	itt	le
 80001ea:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001ee:	4770      	bxle	lr
 80001f0:	f1c2 0200 	rsb	r2, r2, #0
 80001f4:	0041      	lsls	r1, r0, #1
 80001f6:	fa21 f102 	lsr.w	r1, r1, r2
 80001fa:	f1c2 0220 	rsb	r2, r2, #32
 80001fe:	fa00 fc02 	lsl.w	ip, r0, r2
 8000202:	ea5f 0031 	movs.w	r0, r1, rrx
 8000206:	f140 0000 	adc.w	r0, r0, #0
 800020a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020e:	bf08      	it	eq
 8000210:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000214:	4770      	bx	lr
 8000216:	f092 0f00 	teq	r2, #0
 800021a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800021e:	bf02      	ittt	eq
 8000220:	0040      	lsleq	r0, r0, #1
 8000222:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000226:	3a01      	subeq	r2, #1
 8000228:	d0f9      	beq.n	800021e <__aeabi_fmul+0xce>
 800022a:	ea40 000c 	orr.w	r0, r0, ip
 800022e:	f093 0f00 	teq	r3, #0
 8000232:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000236:	bf02      	ittt	eq
 8000238:	0049      	lsleq	r1, r1, #1
 800023a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800023e:	3b01      	subeq	r3, #1
 8000240:	d0f9      	beq.n	8000236 <__aeabi_fmul+0xe6>
 8000242:	ea41 010c 	orr.w	r1, r1, ip
 8000246:	e78f      	b.n	8000168 <__aeabi_fmul+0x18>
 8000248:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800024c:	ea92 0f0c 	teq	r2, ip
 8000250:	bf18      	it	ne
 8000252:	ea93 0f0c 	teqne	r3, ip
 8000256:	d00a      	beq.n	800026e <__aeabi_fmul+0x11e>
 8000258:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800025c:	bf18      	it	ne
 800025e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000262:	d1d8      	bne.n	8000216 <__aeabi_fmul+0xc6>
 8000264:	ea80 0001 	eor.w	r0, r0, r1
 8000268:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800026c:	4770      	bx	lr
 800026e:	f090 0f00 	teq	r0, #0
 8000272:	bf17      	itett	ne
 8000274:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000278:	4608      	moveq	r0, r1
 800027a:	f091 0f00 	teqne	r1, #0
 800027e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000282:	d014      	beq.n	80002ae <__aeabi_fmul+0x15e>
 8000284:	ea92 0f0c 	teq	r2, ip
 8000288:	d101      	bne.n	800028e <__aeabi_fmul+0x13e>
 800028a:	0242      	lsls	r2, r0, #9
 800028c:	d10f      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800028e:	ea93 0f0c 	teq	r3, ip
 8000292:	d103      	bne.n	800029c <__aeabi_fmul+0x14c>
 8000294:	024b      	lsls	r3, r1, #9
 8000296:	bf18      	it	ne
 8000298:	4608      	movne	r0, r1
 800029a:	d108      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800029c:	ea80 0001 	eor.w	r0, r0, r1
 80002a0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002a4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002a8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002ac:	4770      	bx	lr
 80002ae:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002b2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_drsub>:
 80002b8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002bc:	e002      	b.n	80002c4 <__adddf3>
 80002be:	bf00      	nop

080002c0 <__aeabi_dsub>:
 80002c0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002c4 <__adddf3>:
 80002c4:	b530      	push	{r4, r5, lr}
 80002c6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ca:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ce:	ea94 0f05 	teq	r4, r5
 80002d2:	bf08      	it	eq
 80002d4:	ea90 0f02 	teqeq	r0, r2
 80002d8:	bf1f      	itttt	ne
 80002da:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002de:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002e2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002e6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ea:	f000 80e2 	beq.w	80004b2 <__adddf3+0x1ee>
 80002ee:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002f2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002f6:	bfb8      	it	lt
 80002f8:	426d      	neglt	r5, r5
 80002fa:	dd0c      	ble.n	8000316 <__adddf3+0x52>
 80002fc:	442c      	add	r4, r5
 80002fe:	ea80 0202 	eor.w	r2, r0, r2
 8000302:	ea81 0303 	eor.w	r3, r1, r3
 8000306:	ea82 0000 	eor.w	r0, r2, r0
 800030a:	ea83 0101 	eor.w	r1, r3, r1
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	2d36      	cmp	r5, #54	; 0x36
 8000318:	bf88      	it	hi
 800031a:	bd30      	pophi	{r4, r5, pc}
 800031c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000320:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000324:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000328:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800032c:	d002      	beq.n	8000334 <__adddf3+0x70>
 800032e:	4240      	negs	r0, r0
 8000330:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000334:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000338:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800033c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000340:	d002      	beq.n	8000348 <__adddf3+0x84>
 8000342:	4252      	negs	r2, r2
 8000344:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000348:	ea94 0f05 	teq	r4, r5
 800034c:	f000 80a7 	beq.w	800049e <__adddf3+0x1da>
 8000350:	f1a4 0401 	sub.w	r4, r4, #1
 8000354:	f1d5 0e20 	rsbs	lr, r5, #32
 8000358:	db0d      	blt.n	8000376 <__adddf3+0xb2>
 800035a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800035e:	fa22 f205 	lsr.w	r2, r2, r5
 8000362:	1880      	adds	r0, r0, r2
 8000364:	f141 0100 	adc.w	r1, r1, #0
 8000368:	fa03 f20e 	lsl.w	r2, r3, lr
 800036c:	1880      	adds	r0, r0, r2
 800036e:	fa43 f305 	asr.w	r3, r3, r5
 8000372:	4159      	adcs	r1, r3
 8000374:	e00e      	b.n	8000394 <__adddf3+0xd0>
 8000376:	f1a5 0520 	sub.w	r5, r5, #32
 800037a:	f10e 0e20 	add.w	lr, lr, #32
 800037e:	2a01      	cmp	r2, #1
 8000380:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000384:	bf28      	it	cs
 8000386:	f04c 0c02 	orrcs.w	ip, ip, #2
 800038a:	fa43 f305 	asr.w	r3, r3, r5
 800038e:	18c0      	adds	r0, r0, r3
 8000390:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	d507      	bpl.n	80003aa <__adddf3+0xe6>
 800039a:	f04f 0e00 	mov.w	lr, #0
 800039e:	f1dc 0c00 	rsbs	ip, ip, #0
 80003a2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003a6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003aa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003ae:	d31b      	bcc.n	80003e8 <__adddf3+0x124>
 80003b0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003b4:	d30c      	bcc.n	80003d0 <__adddf3+0x10c>
 80003b6:	0849      	lsrs	r1, r1, #1
 80003b8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003bc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c0:	f104 0401 	add.w	r4, r4, #1
 80003c4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003cc:	f080 809a 	bcs.w	8000504 <__adddf3+0x240>
 80003d0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003d4:	bf08      	it	eq
 80003d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003da:	f150 0000 	adcs.w	r0, r0, #0
 80003de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003e2:	ea41 0105 	orr.w	r1, r1, r5
 80003e6:	bd30      	pop	{r4, r5, pc}
 80003e8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003ec:	4140      	adcs	r0, r0
 80003ee:	eb41 0101 	adc.w	r1, r1, r1
 80003f2:	3c01      	subs	r4, #1
 80003f4:	bf28      	it	cs
 80003f6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003fa:	d2e9      	bcs.n	80003d0 <__adddf3+0x10c>
 80003fc:	f091 0f00 	teq	r1, #0
 8000400:	bf04      	itt	eq
 8000402:	4601      	moveq	r1, r0
 8000404:	2000      	moveq	r0, #0
 8000406:	fab1 f381 	clz	r3, r1
 800040a:	bf08      	it	eq
 800040c:	3320      	addeq	r3, #32
 800040e:	f1a3 030b 	sub.w	r3, r3, #11
 8000412:	f1b3 0220 	subs.w	r2, r3, #32
 8000416:	da0c      	bge.n	8000432 <__adddf3+0x16e>
 8000418:	320c      	adds	r2, #12
 800041a:	dd08      	ble.n	800042e <__adddf3+0x16a>
 800041c:	f102 0c14 	add.w	ip, r2, #20
 8000420:	f1c2 020c 	rsb	r2, r2, #12
 8000424:	fa01 f00c 	lsl.w	r0, r1, ip
 8000428:	fa21 f102 	lsr.w	r1, r1, r2
 800042c:	e00c      	b.n	8000448 <__adddf3+0x184>
 800042e:	f102 0214 	add.w	r2, r2, #20
 8000432:	bfd8      	it	le
 8000434:	f1c2 0c20 	rsble	ip, r2, #32
 8000438:	fa01 f102 	lsl.w	r1, r1, r2
 800043c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000440:	bfdc      	itt	le
 8000442:	ea41 010c 	orrle.w	r1, r1, ip
 8000446:	4090      	lslle	r0, r2
 8000448:	1ae4      	subs	r4, r4, r3
 800044a:	bfa2      	ittt	ge
 800044c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000450:	4329      	orrge	r1, r5
 8000452:	bd30      	popge	{r4, r5, pc}
 8000454:	ea6f 0404 	mvn.w	r4, r4
 8000458:	3c1f      	subs	r4, #31
 800045a:	da1c      	bge.n	8000496 <__adddf3+0x1d2>
 800045c:	340c      	adds	r4, #12
 800045e:	dc0e      	bgt.n	800047e <__adddf3+0x1ba>
 8000460:	f104 0414 	add.w	r4, r4, #20
 8000464:	f1c4 0220 	rsb	r2, r4, #32
 8000468:	fa20 f004 	lsr.w	r0, r0, r4
 800046c:	fa01 f302 	lsl.w	r3, r1, r2
 8000470:	ea40 0003 	orr.w	r0, r0, r3
 8000474:	fa21 f304 	lsr.w	r3, r1, r4
 8000478:	ea45 0103 	orr.w	r1, r5, r3
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	f1c4 040c 	rsb	r4, r4, #12
 8000482:	f1c4 0220 	rsb	r2, r4, #32
 8000486:	fa20 f002 	lsr.w	r0, r0, r2
 800048a:	fa01 f304 	lsl.w	r3, r1, r4
 800048e:	ea40 0003 	orr.w	r0, r0, r3
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	fa21 f004 	lsr.w	r0, r1, r4
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	f094 0f00 	teq	r4, #0
 80004a2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004a6:	bf06      	itte	eq
 80004a8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004ac:	3401      	addeq	r4, #1
 80004ae:	3d01      	subne	r5, #1
 80004b0:	e74e      	b.n	8000350 <__adddf3+0x8c>
 80004b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004b6:	bf18      	it	ne
 80004b8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004bc:	d029      	beq.n	8000512 <__adddf3+0x24e>
 80004be:	ea94 0f05 	teq	r4, r5
 80004c2:	bf08      	it	eq
 80004c4:	ea90 0f02 	teqeq	r0, r2
 80004c8:	d005      	beq.n	80004d6 <__adddf3+0x212>
 80004ca:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ce:	bf04      	itt	eq
 80004d0:	4619      	moveq	r1, r3
 80004d2:	4610      	moveq	r0, r2
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	ea91 0f03 	teq	r1, r3
 80004da:	bf1e      	ittt	ne
 80004dc:	2100      	movne	r1, #0
 80004de:	2000      	movne	r0, #0
 80004e0:	bd30      	popne	{r4, r5, pc}
 80004e2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004e6:	d105      	bne.n	80004f4 <__adddf3+0x230>
 80004e8:	0040      	lsls	r0, r0, #1
 80004ea:	4149      	adcs	r1, r1
 80004ec:	bf28      	it	cs
 80004ee:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004f2:	bd30      	pop	{r4, r5, pc}
 80004f4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f8:	bf3c      	itt	cc
 80004fa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004fe:	bd30      	popcc	{r4, r5, pc}
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000508:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800050c:	f04f 0000 	mov.w	r0, #0
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000516:	bf1a      	itte	ne
 8000518:	4619      	movne	r1, r3
 800051a:	4610      	movne	r0, r2
 800051c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000520:	bf1c      	itt	ne
 8000522:	460b      	movne	r3, r1
 8000524:	4602      	movne	r2, r0
 8000526:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800052a:	bf06      	itte	eq
 800052c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000530:	ea91 0f03 	teqeq	r1, r3
 8000534:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	bf00      	nop

0800053c <__aeabi_ui2d>:
 800053c:	f090 0f00 	teq	r0, #0
 8000540:	bf04      	itt	eq
 8000542:	2100      	moveq	r1, #0
 8000544:	4770      	bxeq	lr
 8000546:	b530      	push	{r4, r5, lr}
 8000548:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000550:	f04f 0500 	mov.w	r5, #0
 8000554:	f04f 0100 	mov.w	r1, #0
 8000558:	e750      	b.n	80003fc <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_i2d>:
 800055c:	f090 0f00 	teq	r0, #0
 8000560:	bf04      	itt	eq
 8000562:	2100      	moveq	r1, #0
 8000564:	4770      	bxeq	lr
 8000566:	b530      	push	{r4, r5, lr}
 8000568:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000570:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000574:	bf48      	it	mi
 8000576:	4240      	negmi	r0, r0
 8000578:	f04f 0100 	mov.w	r1, #0
 800057c:	e73e      	b.n	80003fc <__adddf3+0x138>
 800057e:	bf00      	nop

08000580 <__aeabi_f2d>:
 8000580:	0042      	lsls	r2, r0, #1
 8000582:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000586:	ea4f 0131 	mov.w	r1, r1, rrx
 800058a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800058e:	bf1f      	itttt	ne
 8000590:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000594:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000598:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800059c:	4770      	bxne	lr
 800059e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005a2:	bf08      	it	eq
 80005a4:	4770      	bxeq	lr
 80005a6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005aa:	bf04      	itt	eq
 80005ac:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b0:	4770      	bxeq	lr
 80005b2:	b530      	push	{r4, r5, lr}
 80005b4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c0:	e71c      	b.n	80003fc <__adddf3+0x138>
 80005c2:	bf00      	nop

080005c4 <__aeabi_ul2d>:
 80005c4:	ea50 0201 	orrs.w	r2, r0, r1
 80005c8:	bf08      	it	eq
 80005ca:	4770      	bxeq	lr
 80005cc:	b530      	push	{r4, r5, lr}
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	e00a      	b.n	80005ea <__aeabi_l2d+0x16>

080005d4 <__aeabi_l2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005e2:	d502      	bpl.n	80005ea <__aeabi_l2d+0x16>
 80005e4:	4240      	negs	r0, r0
 80005e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ea:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ee:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005f2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005f6:	f43f aed8 	beq.w	80003aa <__adddf3+0xe6>
 80005fa:	f04f 0203 	mov.w	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000612:	f1c2 0320 	rsb	r3, r2, #32
 8000616:	fa00 fc03 	lsl.w	ip, r0, r3
 800061a:	fa20 f002 	lsr.w	r0, r0, r2
 800061e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000622:	ea40 000e 	orr.w	r0, r0, lr
 8000626:	fa21 f102 	lsr.w	r1, r1, r2
 800062a:	4414      	add	r4, r2
 800062c:	e6bd      	b.n	80003aa <__adddf3+0xe6>
 800062e:	bf00      	nop

08000630 <__aeabi_dmul>:
 8000630:	b570      	push	{r4, r5, r6, lr}
 8000632:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000636:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800063a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800063e:	bf1d      	ittte	ne
 8000640:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000644:	ea94 0f0c 	teqne	r4, ip
 8000648:	ea95 0f0c 	teqne	r5, ip
 800064c:	f000 f8de 	bleq	800080c <__aeabi_dmul+0x1dc>
 8000650:	442c      	add	r4, r5
 8000652:	ea81 0603 	eor.w	r6, r1, r3
 8000656:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800065a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800065e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000662:	bf18      	it	ne
 8000664:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000668:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800066c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000670:	d038      	beq.n	80006e4 <__aeabi_dmul+0xb4>
 8000672:	fba0 ce02 	umull	ip, lr, r0, r2
 8000676:	f04f 0500 	mov.w	r5, #0
 800067a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800067e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000682:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000686:	f04f 0600 	mov.w	r6, #0
 800068a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800068e:	f09c 0f00 	teq	ip, #0
 8000692:	bf18      	it	ne
 8000694:	f04e 0e01 	orrne.w	lr, lr, #1
 8000698:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800069c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006a4:	d204      	bcs.n	80006b0 <__aeabi_dmul+0x80>
 80006a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006aa:	416d      	adcs	r5, r5
 80006ac:	eb46 0606 	adc.w	r6, r6, r6
 80006b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006c4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c8:	bf88      	it	hi
 80006ca:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ce:	d81e      	bhi.n	800070e <__aeabi_dmul+0xde>
 80006d0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006d4:	bf08      	it	eq
 80006d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006da:	f150 0000 	adcs.w	r0, r0, #0
 80006de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e8:	ea46 0101 	orr.w	r1, r6, r1
 80006ec:	ea40 0002 	orr.w	r0, r0, r2
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f8:	bfc2      	ittt	gt
 80006fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000702:	bd70      	popgt	{r4, r5, r6, pc}
 8000704:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000708:	f04f 0e00 	mov.w	lr, #0
 800070c:	3c01      	subs	r4, #1
 800070e:	f300 80ab 	bgt.w	8000868 <__aeabi_dmul+0x238>
 8000712:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000716:	bfde      	ittt	le
 8000718:	2000      	movle	r0, #0
 800071a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd70      	pople	{r4, r5, r6, pc}
 8000720:	f1c4 0400 	rsb	r4, r4, #0
 8000724:	3c20      	subs	r4, #32
 8000726:	da35      	bge.n	8000794 <__aeabi_dmul+0x164>
 8000728:	340c      	adds	r4, #12
 800072a:	dc1b      	bgt.n	8000764 <__aeabi_dmul+0x134>
 800072c:	f104 0414 	add.w	r4, r4, #20
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f305 	lsl.w	r3, r0, r5
 8000738:	fa20 f004 	lsr.w	r0, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000748:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800074c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000750:	fa21 f604 	lsr.w	r6, r1, r4
 8000754:	eb42 0106 	adc.w	r1, r2, r6
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 040c 	rsb	r4, r4, #12
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f304 	lsl.w	r3, r0, r4
 8000770:	fa20 f005 	lsr.w	r0, r0, r5
 8000774:	fa01 f204 	lsl.w	r2, r1, r4
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000784:	f141 0100 	adc.w	r1, r1, #0
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f1c4 0520 	rsb	r5, r4, #32
 8000798:	fa00 f205 	lsl.w	r2, r0, r5
 800079c:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a0:	fa20 f304 	lsr.w	r3, r0, r4
 80007a4:	fa01 f205 	lsl.w	r2, r1, r5
 80007a8:	ea43 0302 	orr.w	r3, r3, r2
 80007ac:	fa21 f004 	lsr.w	r0, r1, r4
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b4:	fa21 f204 	lsr.w	r2, r1, r4
 80007b8:	ea20 0002 	bic.w	r0, r0, r2
 80007bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f094 0f00 	teq	r4, #0
 80007d0:	d10f      	bne.n	80007f2 <__aeabi_dmul+0x1c2>
 80007d2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007d6:	0040      	lsls	r0, r0, #1
 80007d8:	eb41 0101 	adc.w	r1, r1, r1
 80007dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e0:	bf08      	it	eq
 80007e2:	3c01      	subeq	r4, #1
 80007e4:	d0f7      	beq.n	80007d6 <__aeabi_dmul+0x1a6>
 80007e6:	ea41 0106 	orr.w	r1, r1, r6
 80007ea:	f095 0f00 	teq	r5, #0
 80007ee:	bf18      	it	ne
 80007f0:	4770      	bxne	lr
 80007f2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007f6:	0052      	lsls	r2, r2, #1
 80007f8:	eb43 0303 	adc.w	r3, r3, r3
 80007fc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000800:	bf08      	it	eq
 8000802:	3d01      	subeq	r5, #1
 8000804:	d0f7      	beq.n	80007f6 <__aeabi_dmul+0x1c6>
 8000806:	ea43 0306 	orr.w	r3, r3, r6
 800080a:	4770      	bx	lr
 800080c:	ea94 0f0c 	teq	r4, ip
 8000810:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000814:	bf18      	it	ne
 8000816:	ea95 0f0c 	teqne	r5, ip
 800081a:	d00c      	beq.n	8000836 <__aeabi_dmul+0x206>
 800081c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000820:	bf18      	it	ne
 8000822:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000826:	d1d1      	bne.n	80007cc <__aeabi_dmul+0x19c>
 8000828:	ea81 0103 	eor.w	r1, r1, r3
 800082c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000830:	f04f 0000 	mov.w	r0, #0
 8000834:	bd70      	pop	{r4, r5, r6, pc}
 8000836:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800083a:	bf06      	itte	eq
 800083c:	4610      	moveq	r0, r2
 800083e:	4619      	moveq	r1, r3
 8000840:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000844:	d019      	beq.n	800087a <__aeabi_dmul+0x24a>
 8000846:	ea94 0f0c 	teq	r4, ip
 800084a:	d102      	bne.n	8000852 <__aeabi_dmul+0x222>
 800084c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000850:	d113      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000852:	ea95 0f0c 	teq	r5, ip
 8000856:	d105      	bne.n	8000864 <__aeabi_dmul+0x234>
 8000858:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800085c:	bf1c      	itt	ne
 800085e:	4610      	movne	r0, r2
 8000860:	4619      	movne	r1, r3
 8000862:	d10a      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000864:	ea81 0103 	eor.w	r1, r1, r3
 8000868:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800086c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000870:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	bd70      	pop	{r4, r5, r6, pc}
 800087a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800087e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000882:	bd70      	pop	{r4, r5, r6, pc}

08000884 <__aeabi_ddiv>:
 8000884:	b570      	push	{r4, r5, r6, lr}
 8000886:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800088a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800088e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000892:	bf1d      	ittte	ne
 8000894:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000898:	ea94 0f0c 	teqne	r4, ip
 800089c:	ea95 0f0c 	teqne	r5, ip
 80008a0:	f000 f8a7 	bleq	80009f2 <__aeabi_ddiv+0x16e>
 80008a4:	eba4 0405 	sub.w	r4, r4, r5
 80008a8:	ea81 0e03 	eor.w	lr, r1, r3
 80008ac:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008b4:	f000 8088 	beq.w	80009c8 <__aeabi_ddiv+0x144>
 80008b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008bc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008c4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008cc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008d4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008dc:	429d      	cmp	r5, r3
 80008de:	bf08      	it	eq
 80008e0:	4296      	cmpeq	r6, r2
 80008e2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008e6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ea:	d202      	bcs.n	80008f2 <__aeabi_ddiv+0x6e>
 80008ec:	085b      	lsrs	r3, r3, #1
 80008ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f2:	1ab6      	subs	r6, r6, r2
 80008f4:	eb65 0503 	sbc.w	r5, r5, r3
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000902:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 000c 	orrcs.w	r0, r0, ip
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000960:	ea55 0e06 	orrs.w	lr, r5, r6
 8000964:	d018      	beq.n	8000998 <__aeabi_ddiv+0x114>
 8000966:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800096a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800096e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000972:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000976:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800097a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800097e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000982:	d1c0      	bne.n	8000906 <__aeabi_ddiv+0x82>
 8000984:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000988:	d10b      	bne.n	80009a2 <__aeabi_ddiv+0x11e>
 800098a:	ea41 0100 	orr.w	r1, r1, r0
 800098e:	f04f 0000 	mov.w	r0, #0
 8000992:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000996:	e7b6      	b.n	8000906 <__aeabi_ddiv+0x82>
 8000998:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800099c:	bf04      	itt	eq
 800099e:	4301      	orreq	r1, r0
 80009a0:	2000      	moveq	r0, #0
 80009a2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009a6:	bf88      	it	hi
 80009a8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009ac:	f63f aeaf 	bhi.w	800070e <__aeabi_dmul+0xde>
 80009b0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009b4:	bf04      	itt	eq
 80009b6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009be:	f150 0000 	adcs.w	r0, r0, #0
 80009c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	pop	{r4, r5, r6, pc}
 80009c8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009cc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009d4:	bfc2      	ittt	gt
 80009d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009de:	bd70      	popgt	{r4, r5, r6, pc}
 80009e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009e4:	f04f 0e00 	mov.w	lr, #0
 80009e8:	3c01      	subs	r4, #1
 80009ea:	e690      	b.n	800070e <__aeabi_dmul+0xde>
 80009ec:	ea45 0e06 	orr.w	lr, r5, r6
 80009f0:	e68d      	b.n	800070e <__aeabi_dmul+0xde>
 80009f2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009f6:	ea94 0f0c 	teq	r4, ip
 80009fa:	bf08      	it	eq
 80009fc:	ea95 0f0c 	teqeq	r5, ip
 8000a00:	f43f af3b 	beq.w	800087a <__aeabi_dmul+0x24a>
 8000a04:	ea94 0f0c 	teq	r4, ip
 8000a08:	d10a      	bne.n	8000a20 <__aeabi_ddiv+0x19c>
 8000a0a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a0e:	f47f af34 	bne.w	800087a <__aeabi_dmul+0x24a>
 8000a12:	ea95 0f0c 	teq	r5, ip
 8000a16:	f47f af25 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	e72c      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a20:	ea95 0f0c 	teq	r5, ip
 8000a24:	d106      	bne.n	8000a34 <__aeabi_ddiv+0x1b0>
 8000a26:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a2a:	f43f aefd 	beq.w	8000828 <__aeabi_dmul+0x1f8>
 8000a2e:	4610      	mov	r0, r2
 8000a30:	4619      	mov	r1, r3
 8000a32:	e722      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a34:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a3e:	f47f aec5 	bne.w	80007cc <__aeabi_dmul+0x19c>
 8000a42:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a46:	f47f af0d 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a4a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a4e:	f47f aeeb 	bne.w	8000828 <__aeabi_dmul+0x1f8>
 8000a52:	e712      	b.n	800087a <__aeabi_dmul+0x24a>

08000a54 <__aeabi_d2f>:
 8000a54:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a58:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a5c:	bf24      	itt	cs
 8000a5e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a62:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a66:	d90d      	bls.n	8000a84 <__aeabi_d2f+0x30>
 8000a68:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a6c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a70:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a74:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a78:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a7c:	bf08      	it	eq
 8000a7e:	f020 0001 	biceq.w	r0, r0, #1
 8000a82:	4770      	bx	lr
 8000a84:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a88:	d121      	bne.n	8000ace <__aeabi_d2f+0x7a>
 8000a8a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a8e:	bfbc      	itt	lt
 8000a90:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a94:	4770      	bxlt	lr
 8000a96:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a9a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a9e:	f1c2 0218 	rsb	r2, r2, #24
 8000aa2:	f1c2 0c20 	rsb	ip, r2, #32
 8000aa6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aaa:	fa20 f002 	lsr.w	r0, r0, r2
 8000aae:	bf18      	it	ne
 8000ab0:	f040 0001 	orrne.w	r0, r0, #1
 8000ab4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000abc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ac0:	ea40 000c 	orr.w	r0, r0, ip
 8000ac4:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000acc:	e7cc      	b.n	8000a68 <__aeabi_d2f+0x14>
 8000ace:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ad2:	d107      	bne.n	8000ae4 <__aeabi_d2f+0x90>
 8000ad4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad8:	bf1e      	ittt	ne
 8000ada:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ade:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ae2:	4770      	bxne	lr
 8000ae4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ae8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000aec:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop

08000af4 <__aeabi_frsub>:
 8000af4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000af8:	e002      	b.n	8000b00 <__addsf3>
 8000afa:	bf00      	nop

08000afc <__aeabi_fsub>:
 8000afc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b00 <__addsf3>:
 8000b00:	0042      	lsls	r2, r0, #1
 8000b02:	bf1f      	itttt	ne
 8000b04:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b08:	ea92 0f03 	teqne	r2, r3
 8000b0c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b10:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b14:	d06a      	beq.n	8000bec <__addsf3+0xec>
 8000b16:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b1a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b1e:	bfc1      	itttt	gt
 8000b20:	18d2      	addgt	r2, r2, r3
 8000b22:	4041      	eorgt	r1, r0
 8000b24:	4048      	eorgt	r0, r1
 8000b26:	4041      	eorgt	r1, r0
 8000b28:	bfb8      	it	lt
 8000b2a:	425b      	neglt	r3, r3
 8000b2c:	2b19      	cmp	r3, #25
 8000b2e:	bf88      	it	hi
 8000b30:	4770      	bxhi	lr
 8000b32:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b36:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b3a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b3e:	bf18      	it	ne
 8000b40:	4240      	negne	r0, r0
 8000b42:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b46:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b4a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b4e:	bf18      	it	ne
 8000b50:	4249      	negne	r1, r1
 8000b52:	ea92 0f03 	teq	r2, r3
 8000b56:	d03f      	beq.n	8000bd8 <__addsf3+0xd8>
 8000b58:	f1a2 0201 	sub.w	r2, r2, #1
 8000b5c:	fa41 fc03 	asr.w	ip, r1, r3
 8000b60:	eb10 000c 	adds.w	r0, r0, ip
 8000b64:	f1c3 0320 	rsb	r3, r3, #32
 8000b68:	fa01 f103 	lsl.w	r1, r1, r3
 8000b6c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b70:	d502      	bpl.n	8000b78 <__addsf3+0x78>
 8000b72:	4249      	negs	r1, r1
 8000b74:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b78:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b7c:	d313      	bcc.n	8000ba6 <__addsf3+0xa6>
 8000b7e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b82:	d306      	bcc.n	8000b92 <__addsf3+0x92>
 8000b84:	0840      	lsrs	r0, r0, #1
 8000b86:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b8a:	f102 0201 	add.w	r2, r2, #1
 8000b8e:	2afe      	cmp	r2, #254	; 0xfe
 8000b90:	d251      	bcs.n	8000c36 <__addsf3+0x136>
 8000b92:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b96:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b9a:	bf08      	it	eq
 8000b9c:	f020 0001 	biceq.w	r0, r0, #1
 8000ba0:	ea40 0003 	orr.w	r0, r0, r3
 8000ba4:	4770      	bx	lr
 8000ba6:	0049      	lsls	r1, r1, #1
 8000ba8:	eb40 0000 	adc.w	r0, r0, r0
 8000bac:	3a01      	subs	r2, #1
 8000bae:	bf28      	it	cs
 8000bb0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bb4:	d2ed      	bcs.n	8000b92 <__addsf3+0x92>
 8000bb6:	fab0 fc80 	clz	ip, r0
 8000bba:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bbe:	ebb2 020c 	subs.w	r2, r2, ip
 8000bc2:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bc6:	bfaa      	itet	ge
 8000bc8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bcc:	4252      	neglt	r2, r2
 8000bce:	4318      	orrge	r0, r3
 8000bd0:	bfbc      	itt	lt
 8000bd2:	40d0      	lsrlt	r0, r2
 8000bd4:	4318      	orrlt	r0, r3
 8000bd6:	4770      	bx	lr
 8000bd8:	f092 0f00 	teq	r2, #0
 8000bdc:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000be0:	bf06      	itte	eq
 8000be2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000be6:	3201      	addeq	r2, #1
 8000be8:	3b01      	subne	r3, #1
 8000bea:	e7b5      	b.n	8000b58 <__addsf3+0x58>
 8000bec:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bf0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bf4:	bf18      	it	ne
 8000bf6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bfa:	d021      	beq.n	8000c40 <__addsf3+0x140>
 8000bfc:	ea92 0f03 	teq	r2, r3
 8000c00:	d004      	beq.n	8000c0c <__addsf3+0x10c>
 8000c02:	f092 0f00 	teq	r2, #0
 8000c06:	bf08      	it	eq
 8000c08:	4608      	moveq	r0, r1
 8000c0a:	4770      	bx	lr
 8000c0c:	ea90 0f01 	teq	r0, r1
 8000c10:	bf1c      	itt	ne
 8000c12:	2000      	movne	r0, #0
 8000c14:	4770      	bxne	lr
 8000c16:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c1a:	d104      	bne.n	8000c26 <__addsf3+0x126>
 8000c1c:	0040      	lsls	r0, r0, #1
 8000c1e:	bf28      	it	cs
 8000c20:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c24:	4770      	bx	lr
 8000c26:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c2a:	bf3c      	itt	cc
 8000c2c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c30:	4770      	bxcc	lr
 8000c32:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c36:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c3a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c3e:	4770      	bx	lr
 8000c40:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c44:	bf16      	itet	ne
 8000c46:	4608      	movne	r0, r1
 8000c48:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c4c:	4601      	movne	r1, r0
 8000c4e:	0242      	lsls	r2, r0, #9
 8000c50:	bf06      	itte	eq
 8000c52:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c56:	ea90 0f01 	teqeq	r0, r1
 8000c5a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c5e:	4770      	bx	lr

08000c60 <__aeabi_ui2f>:
 8000c60:	f04f 0300 	mov.w	r3, #0
 8000c64:	e004      	b.n	8000c70 <__aeabi_i2f+0x8>
 8000c66:	bf00      	nop

08000c68 <__aeabi_i2f>:
 8000c68:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c6c:	bf48      	it	mi
 8000c6e:	4240      	negmi	r0, r0
 8000c70:	ea5f 0c00 	movs.w	ip, r0
 8000c74:	bf08      	it	eq
 8000c76:	4770      	bxeq	lr
 8000c78:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c7c:	4601      	mov	r1, r0
 8000c7e:	f04f 0000 	mov.w	r0, #0
 8000c82:	e01c      	b.n	8000cbe <__aeabi_l2f+0x2a>

08000c84 <__aeabi_ul2f>:
 8000c84:	ea50 0201 	orrs.w	r2, r0, r1
 8000c88:	bf08      	it	eq
 8000c8a:	4770      	bxeq	lr
 8000c8c:	f04f 0300 	mov.w	r3, #0
 8000c90:	e00a      	b.n	8000ca8 <__aeabi_l2f+0x14>
 8000c92:	bf00      	nop

08000c94 <__aeabi_l2f>:
 8000c94:	ea50 0201 	orrs.w	r2, r0, r1
 8000c98:	bf08      	it	eq
 8000c9a:	4770      	bxeq	lr
 8000c9c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000ca0:	d502      	bpl.n	8000ca8 <__aeabi_l2f+0x14>
 8000ca2:	4240      	negs	r0, r0
 8000ca4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca8:	ea5f 0c01 	movs.w	ip, r1
 8000cac:	bf02      	ittt	eq
 8000cae:	4684      	moveq	ip, r0
 8000cb0:	4601      	moveq	r1, r0
 8000cb2:	2000      	moveq	r0, #0
 8000cb4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cb8:	bf08      	it	eq
 8000cba:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cbe:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cc2:	fabc f28c 	clz	r2, ip
 8000cc6:	3a08      	subs	r2, #8
 8000cc8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ccc:	db10      	blt.n	8000cf0 <__aeabi_l2f+0x5c>
 8000cce:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cd2:	4463      	add	r3, ip
 8000cd4:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cd8:	f1c2 0220 	rsb	r2, r2, #32
 8000cdc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000ce0:	fa20 f202 	lsr.w	r2, r0, r2
 8000ce4:	eb43 0002 	adc.w	r0, r3, r2
 8000ce8:	bf08      	it	eq
 8000cea:	f020 0001 	biceq.w	r0, r0, #1
 8000cee:	4770      	bx	lr
 8000cf0:	f102 0220 	add.w	r2, r2, #32
 8000cf4:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf8:	f1c2 0220 	rsb	r2, r2, #32
 8000cfc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d00:	fa21 f202 	lsr.w	r2, r1, r2
 8000d04:	eb43 0002 	adc.w	r0, r3, r2
 8000d08:	bf08      	it	eq
 8000d0a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d0e:	4770      	bx	lr

08000d10 <__aeabi_f2uiz>:
 8000d10:	0042      	lsls	r2, r0, #1
 8000d12:	d20e      	bcs.n	8000d32 <__aeabi_f2uiz+0x22>
 8000d14:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000d18:	d30b      	bcc.n	8000d32 <__aeabi_f2uiz+0x22>
 8000d1a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000d1e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d22:	d409      	bmi.n	8000d38 <__aeabi_f2uiz+0x28>
 8000d24:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d28:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d2c:	fa23 f002 	lsr.w	r0, r3, r2
 8000d30:	4770      	bx	lr
 8000d32:	f04f 0000 	mov.w	r0, #0
 8000d36:	4770      	bx	lr
 8000d38:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000d3c:	d101      	bne.n	8000d42 <__aeabi_f2uiz+0x32>
 8000d3e:	0242      	lsls	r2, r0, #9
 8000d40:	d102      	bne.n	8000d48 <__aeabi_f2uiz+0x38>
 8000d42:	f04f 30ff 	mov.w	r0, #4294967295
 8000d46:	4770      	bx	lr
 8000d48:	f04f 0000 	mov.w	r0, #0
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop

08000d50 <SystemClock_Config>:

UART_HandleTypeDef huart2;


void SystemClock_Config(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b094      	sub	sp, #80	; 0x50
 8000d54:	af00      	add	r7, sp, #0
	  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d56:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d5a:	2228      	movs	r2, #40	; 0x28
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f002 fa9c 	bl	800329c <memset>
	  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d64:	f107 0314 	add.w	r3, r7, #20
 8000d68:	2200      	movs	r2, #0
 8000d6a:	601a      	str	r2, [r3, #0]
 8000d6c:	605a      	str	r2, [r3, #4]
 8000d6e:	609a      	str	r2, [r3, #8]
 8000d70:	60da      	str	r2, [r3, #12]
 8000d72:	611a      	str	r2, [r3, #16]
	  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d74:	1d3b      	adds	r3, r7, #4
 8000d76:	2200      	movs	r2, #0
 8000d78:	601a      	str	r2, [r3, #0]
 8000d7a:	605a      	str	r2, [r3, #4]
 8000d7c:	609a      	str	r2, [r3, #8]
 8000d7e:	60da      	str	r2, [r3, #12]

	  /** Initializes the RCC Oscillators according to the specified parameters
	  * in the RCC_OscInitTypeDef structure.
	  */
	  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d80:	2302      	movs	r3, #2
 8000d82:	62bb      	str	r3, [r7, #40]	; 0x28
	  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d84:	2301      	movs	r3, #1
 8000d86:	63bb      	str	r3, [r7, #56]	; 0x38
	  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d88:	2310      	movs	r3, #16
 8000d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
	  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	647b      	str	r3, [r7, #68]	; 0x44
	  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d90:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d94:	4618      	mov	r0, r3
 8000d96:	f001 fb35 	bl	8002404 <HAL_RCC_OscConfig>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <SystemClock_Config+0x54>
	  {
	    Error_Handler();
 8000da0:	f000 f8e0 	bl	8000f64 <Error_Handler>
	  }

	  /** Initializes the CPU, AHB and APB buses clocks
	  */
	  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000da4:	230f      	movs	r3, #15
 8000da6:	617b      	str	r3, [r7, #20]
	                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000da8:	2300      	movs	r3, #0
 8000daa:	61bb      	str	r3, [r7, #24]
	  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dac:	2300      	movs	r3, #0
 8000dae:	61fb      	str	r3, [r7, #28]
	  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000db0:	2300      	movs	r3, #0
 8000db2:	623b      	str	r3, [r7, #32]
	  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000db4:	2300      	movs	r3, #0
 8000db6:	627b      	str	r3, [r7, #36]	; 0x24

	  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000db8:	f107 0314 	add.w	r3, r7, #20
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f001 fda2 	bl	8002908 <HAL_RCC_ClockConfig>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <SystemClock_Config+0x7e>
	  {
	    Error_Handler();
 8000dca:	f000 f8cb 	bl	8000f64 <Error_Handler>
	  }
	  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000dce:	2302      	movs	r3, #2
 8000dd0:	607b      	str	r3, [r7, #4]
	  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	60fb      	str	r3, [r7, #12]
	  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dd6:	1d3b      	adds	r3, r7, #4
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f001 ff23 	bl	8002c24 <HAL_RCCEx_PeriphCLKConfig>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <SystemClock_Config+0x98>
	  {
	    Error_Handler();
 8000de4:	f000 f8be 	bl	8000f64 <Error_Handler>
	  }

}
 8000de8:	bf00      	nop
 8000dea:	3750      	adds	r7, #80	; 0x50
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}

08000df0 <MX_GPIO_Init>:
void MX_GPIO_Init(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b086      	sub	sp, #24
 8000df4:	af00      	add	r7, sp, #0
	   GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df6:	f107 0308 	add.w	r3, r7, #8
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	601a      	str	r2, [r3, #0]
 8000dfe:	605a      	str	r2, [r3, #4]
 8000e00:	609a      	str	r2, [r3, #8]
 8000e02:	60da      	str	r2, [r3, #12]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e04:	4b17      	ldr	r3, [pc, #92]	; (8000e64 <MX_GPIO_Init+0x74>)
 8000e06:	699b      	ldr	r3, [r3, #24]
 8000e08:	4a16      	ldr	r2, [pc, #88]	; (8000e64 <MX_GPIO_Init+0x74>)
 8000e0a:	f043 0308 	orr.w	r3, r3, #8
 8000e0e:	6193      	str	r3, [r2, #24]
 8000e10:	4b14      	ldr	r3, [pc, #80]	; (8000e64 <MX_GPIO_Init+0x74>)
 8000e12:	699b      	ldr	r3, [r3, #24]
 8000e14:	f003 0308 	and.w	r3, r3, #8
 8000e18:	607b      	str	r3, [r7, #4]
 8000e1a:	687b      	ldr	r3, [r7, #4]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e1c:	4b11      	ldr	r3, [pc, #68]	; (8000e64 <MX_GPIO_Init+0x74>)
 8000e1e:	699b      	ldr	r3, [r3, #24]
 8000e20:	4a10      	ldr	r2, [pc, #64]	; (8000e64 <MX_GPIO_Init+0x74>)
 8000e22:	f043 0304 	orr.w	r3, r3, #4
 8000e26:	6193      	str	r3, [r2, #24]
 8000e28:	4b0e      	ldr	r3, [pc, #56]	; (8000e64 <MX_GPIO_Init+0x74>)
 8000e2a:	699b      	ldr	r3, [r3, #24]
 8000e2c:	f003 0304 	and.w	r3, r3, #4
 8000e30:	603b      	str	r3, [r7, #0]
 8000e32:	683b      	ldr	r3, [r7, #0]

	  /*Configure GPIO pin Output Level */
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000e34:	2200      	movs	r2, #0
 8000e36:	2101      	movs	r1, #1
 8000e38:	480b      	ldr	r0, [pc, #44]	; (8000e68 <MX_GPIO_Init+0x78>)
 8000e3a:	f001 facb 	bl	80023d4 <HAL_GPIO_WritePin>

	    /*Configure GPIO pin : PA1 */
	    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	60bb      	str	r3, [r7, #8]
	    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e42:	2301      	movs	r3, #1
 8000e44:	60fb      	str	r3, [r7, #12]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e46:	2300      	movs	r3, #0
 8000e48:	613b      	str	r3, [r7, #16]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4a:	2302      	movs	r3, #2
 8000e4c:	617b      	str	r3, [r7, #20]
	    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e4e:	f107 0308 	add.w	r3, r7, #8
 8000e52:	4619      	mov	r1, r3
 8000e54:	4804      	ldr	r0, [pc, #16]	; (8000e68 <MX_GPIO_Init+0x78>)
 8000e56:	f001 f939 	bl	80020cc <HAL_GPIO_Init>
}
 8000e5a:	bf00      	nop
 8000e5c:	3718      	adds	r7, #24
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	40021000 	.word	0x40021000
 8000e68:	40010c00 	.word	0x40010c00

08000e6c <MX_USART2_UART_Init>:
void MX_USART2_UART_Init(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
	  huart2.Instance = USART2;
 8000e70:	4b11      	ldr	r3, [pc, #68]	; (8000eb8 <MX_USART2_UART_Init+0x4c>)
 8000e72:	4a12      	ldr	r2, [pc, #72]	; (8000ebc <MX_USART2_UART_Init+0x50>)
 8000e74:	601a      	str	r2, [r3, #0]
	  huart2.Init.BaudRate = 115200;
 8000e76:	4b10      	ldr	r3, [pc, #64]	; (8000eb8 <MX_USART2_UART_Init+0x4c>)
 8000e78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e7c:	605a      	str	r2, [r3, #4]
	  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e7e:	4b0e      	ldr	r3, [pc, #56]	; (8000eb8 <MX_USART2_UART_Init+0x4c>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	609a      	str	r2, [r3, #8]
	  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e84:	4b0c      	ldr	r3, [pc, #48]	; (8000eb8 <MX_USART2_UART_Init+0x4c>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	60da      	str	r2, [r3, #12]
	  huart2.Init.Parity = UART_PARITY_NONE;
 8000e8a:	4b0b      	ldr	r3, [pc, #44]	; (8000eb8 <MX_USART2_UART_Init+0x4c>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	611a      	str	r2, [r3, #16]
	  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e90:	4b09      	ldr	r3, [pc, #36]	; (8000eb8 <MX_USART2_UART_Init+0x4c>)
 8000e92:	220c      	movs	r2, #12
 8000e94:	615a      	str	r2, [r3, #20]
	  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e96:	4b08      	ldr	r3, [pc, #32]	; (8000eb8 <MX_USART2_UART_Init+0x4c>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	619a      	str	r2, [r3, #24]
	  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e9c:	4b06      	ldr	r3, [pc, #24]	; (8000eb8 <MX_USART2_UART_Init+0x4c>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	61da      	str	r2, [r3, #28]
	  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ea2:	4805      	ldr	r0, [pc, #20]	; (8000eb8 <MX_USART2_UART_Init+0x4c>)
 8000ea4:	f002 f82a 	bl	8002efc <HAL_UART_Init>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <MX_USART2_UART_Init+0x46>
	  {
	    Error_Handler();
 8000eae:	f000 f859 	bl	8000f64 <Error_Handler>
	  }
}
 8000eb2:	bf00      	nop
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	20000058 	.word	0x20000058
 8000ebc:	40004400 	.word	0x40004400

08000ec0 <MX_ADC1_Init>:
void MX_ADC1_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b084      	sub	sp, #16
 8000ec4:	af00      	add	r7, sp, #0
	  ADC_ChannelConfTypeDef sConfig = {0};
 8000ec6:	1d3b      	adds	r3, r7, #4
 8000ec8:	2200      	movs	r2, #0
 8000eca:	601a      	str	r2, [r3, #0]
 8000ecc:	605a      	str	r2, [r3, #4]
 8000ece:	609a      	str	r2, [r3, #8]
	  hadc1.Instance = ADC1;
 8000ed0:	4b18      	ldr	r3, [pc, #96]	; (8000f34 <MX_ADC1_Init+0x74>)
 8000ed2:	4a19      	ldr	r2, [pc, #100]	; (8000f38 <MX_ADC1_Init+0x78>)
 8000ed4:	601a      	str	r2, [r3, #0]
	  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ed6:	4b17      	ldr	r3, [pc, #92]	; (8000f34 <MX_ADC1_Init+0x74>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	609a      	str	r2, [r3, #8]
	  hadc1.Init.ContinuousConvMode = DISABLE;
 8000edc:	4b15      	ldr	r3, [pc, #84]	; (8000f34 <MX_ADC1_Init+0x74>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	731a      	strb	r2, [r3, #12]
	  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ee2:	4b14      	ldr	r3, [pc, #80]	; (8000f34 <MX_ADC1_Init+0x74>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	751a      	strb	r2, [r3, #20]
	  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ee8:	4b12      	ldr	r3, [pc, #72]	; (8000f34 <MX_ADC1_Init+0x74>)
 8000eea:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000eee:	61da      	str	r2, [r3, #28]
	  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ef0:	4b10      	ldr	r3, [pc, #64]	; (8000f34 <MX_ADC1_Init+0x74>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	605a      	str	r2, [r3, #4]
	  hadc1.Init.NbrOfConversion = 1;
 8000ef6:	4b0f      	ldr	r3, [pc, #60]	; (8000f34 <MX_ADC1_Init+0x74>)
 8000ef8:	2201      	movs	r2, #1
 8000efa:	611a      	str	r2, [r3, #16]
	  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000efc:	480d      	ldr	r0, [pc, #52]	; (8000f34 <MX_ADC1_Init+0x74>)
 8000efe:	f000 fba9 	bl	8001654 <HAL_ADC_Init>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <MX_ADC1_Init+0x4c>
	  {
	    Error_Handler();
 8000f08:	f000 f82c 	bl	8000f64 <Error_Handler>
	  }

	  /** Configure Regular Channel
	  */
	  sConfig.Channel = ADC_CHANNEL_5;
 8000f0c:	2305      	movs	r3, #5
 8000f0e:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f10:	2301      	movs	r3, #1
 8000f12:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000f14:	2300      	movs	r3, #0
 8000f16:	60fb      	str	r3, [r7, #12]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f18:	1d3b      	adds	r3, r7, #4
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	4805      	ldr	r0, [pc, #20]	; (8000f34 <MX_ADC1_Init+0x74>)
 8000f1e:	f000 fe5d 	bl	8001bdc <HAL_ADC_ConfigChannel>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <MX_ADC1_Init+0x6c>
	  {
	    Error_Handler();
 8000f28:	f000 f81c 	bl	8000f64 <Error_Handler>
	  }
}
 8000f2c:	bf00      	nop
 8000f2e:	3710      	adds	r7, #16
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	20000028 	.word	0x20000028
 8000f38:	40012400 	.word	0x40012400

08000f3c <UART_vTransimt>:

void UART_vTransimt(char*Copy_data,unsigned char length)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
 8000f44:	460b      	mov	r3, r1
 8000f46:	70fb      	strb	r3, [r7, #3]
	HAL_UART_Transmit(&huart2,Copy_data,length,1000);
 8000f48:	78fb      	ldrb	r3, [r7, #3]
 8000f4a:	b29a      	uxth	r2, r3
 8000f4c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f50:	6879      	ldr	r1, [r7, #4]
 8000f52:	4803      	ldr	r0, [pc, #12]	; (8000f60 <UART_vTransimt+0x24>)
 8000f54:	f002 f822 	bl	8002f9c <HAL_UART_Transmit>
}
 8000f58:	bf00      	nop
 8000f5a:	3708      	adds	r7, #8
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	20000058 	.word	0x20000058

08000f64 <Error_Handler>:
void Error_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f68:	b672      	cpsid	i
}
 8000f6a:	bf00      	nop

  __disable_irq();
  while (1)
 8000f6c:	e7fe      	b.n	8000f6c <Error_Handler+0x8>
	...

08000f70 <main>:
unsigned char App_index;
char App_temp_str[7];
float App_temp;

int main(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0

  HAL_Init();
 8000f74:	f000 fae8 	bl	8001548 <HAL_Init>
  SystemClock_Config();
 8000f78:	f7ff feea 	bl	8000d50 <SystemClock_Config>
  MX_GPIO_Init();
 8000f7c:	f7ff ff38 	bl	8000df0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f80:	f7ff ff74 	bl	8000e6c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000f84:	f7ff ff9c 	bl	8000ec0 <MX_ADC1_Init>

  while (1)
  {
	  pH_vReadValue(App_ph_samples,&App_temp);
 8000f88:	490d      	ldr	r1, [pc, #52]	; (8000fc0 <main+0x50>)
 8000f8a:	480e      	ldr	r0, [pc, #56]	; (8000fc4 <main+0x54>)
 8000f8c:	f000 f820 	bl	8000fd0 <pH_vReadValue>
	  ConvertToString(App_temp,&App_temp_str);
 8000f90:	4b0b      	ldr	r3, [pc, #44]	; (8000fc0 <main+0x50>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	490c      	ldr	r1, [pc, #48]	; (8000fc8 <main+0x58>)
 8000f96:	4618      	mov	r0, r3
 8000f98:	f000 f8e4 	bl	8001164 <ConvertToString>
	  ConverFracToString(App_temp,&App_temp_str,&App_index);
 8000f9c:	4b08      	ldr	r3, [pc, #32]	; (8000fc0 <main+0x50>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a0a      	ldr	r2, [pc, #40]	; (8000fcc <main+0x5c>)
 8000fa2:	4909      	ldr	r1, [pc, #36]	; (8000fc8 <main+0x58>)
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f000 f945 	bl	8001234 <ConverFracToString>
	  UART_vTransimt(&App_temp_str,App_index);
 8000faa:	4b08      	ldr	r3, [pc, #32]	; (8000fcc <main+0x5c>)
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	4619      	mov	r1, r3
 8000fb0:	4805      	ldr	r0, [pc, #20]	; (8000fc8 <main+0x58>)
 8000fb2:	f7ff ffc3 	bl	8000f3c <UART_vTransimt>
	  HAL_Delay(7000);
 8000fb6:	f641 3058 	movw	r0, #7000	; 0x1b58
 8000fba:	f000 fb27 	bl	800160c <HAL_Delay>
	  pH_vReadValue(App_ph_samples,&App_temp);
 8000fbe:	e7e3      	b.n	8000f88 <main+0x18>
 8000fc0:	200000c0 	.word	0x200000c0
 8000fc4:	200000a0 	.word	0x200000a0
 8000fc8:	200000b8 	.word	0x200000b8
 8000fcc:	200000b4 	.word	0x200000b4

08000fd0 <pH_vReadValue>:
#include "pH_Interface.h"

extern ADC_HandleTypeDef hadc1;

void pH_vReadValue(uint16_t buff[] ,float*Copy_f32pHValue)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b086      	sub	sp, #24
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	6039      	str	r1, [r7, #0]
	  uint16_t temp =0;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	827b      	strh	r3, [r7, #18]
	  uint16_t average;
	  uint8_t i;
	  uint8_t  j;
	  float ph_value = 0;
 8000fde:	f04f 0300 	mov.w	r3, #0
 8000fe2:	60fb      	str	r3, [r7, #12]
	  for(i=0;i<10;i++)
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	757b      	strb	r3, [r7, #21]
 8000fe8:	e01a      	b.n	8001020 <pH_vReadValue+0x50>
	  {
	     HAL_ADC_Start(&hadc1);
 8000fea:	485b      	ldr	r0, [pc, #364]	; (8001158 <pH_vReadValue+0x188>)
 8000fec:	f000 fc0a 	bl	8001804 <HAL_ADC_Start>
	     HAL_ADC_PollForConversion(&hadc1,2000);
 8000ff0:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8000ff4:	4858      	ldr	r0, [pc, #352]	; (8001158 <pH_vReadValue+0x188>)
 8000ff6:	f000 fcdf 	bl	80019b8 <HAL_ADC_PollForConversion>
	     buff[i] = HAL_ADC_GetValue(&hadc1);
 8000ffa:	4857      	ldr	r0, [pc, #348]	; (8001158 <pH_vReadValue+0x188>)
 8000ffc:	f000 fde2 	bl	8001bc4 <HAL_ADC_GetValue>
 8001000:	4601      	mov	r1, r0
 8001002:	7d7b      	ldrb	r3, [r7, #21]
 8001004:	005b      	lsls	r3, r3, #1
 8001006:	687a      	ldr	r2, [r7, #4]
 8001008:	4413      	add	r3, r2
 800100a:	b28a      	uxth	r2, r1
 800100c:	801a      	strh	r2, [r3, #0]
	     HAL_ADC_Stop(&hadc1);
 800100e:	4852      	ldr	r0, [pc, #328]	; (8001158 <pH_vReadValue+0x188>)
 8001010:	f000 fca6 	bl	8001960 <HAL_ADC_Stop>
	     HAL_Delay(100);
 8001014:	2064      	movs	r0, #100	; 0x64
 8001016:	f000 faf9 	bl	800160c <HAL_Delay>
	  for(i=0;i<10;i++)
 800101a:	7d7b      	ldrb	r3, [r7, #21]
 800101c:	3301      	adds	r3, #1
 800101e:	757b      	strb	r3, [r7, #21]
 8001020:	7d7b      	ldrb	r3, [r7, #21]
 8001022:	2b09      	cmp	r3, #9
 8001024:	d9e1      	bls.n	8000fea <pH_vReadValue+0x1a>
	  }
	  for(i=0;i<9;i++)
 8001026:	2300      	movs	r3, #0
 8001028:	757b      	strb	r3, [r7, #21]
 800102a:	e02e      	b.n	800108a <pH_vReadValue+0xba>
	  {
	  	 for(j=i+1;j<10;j++)
 800102c:	7d7b      	ldrb	r3, [r7, #21]
 800102e:	3301      	adds	r3, #1
 8001030:	753b      	strb	r3, [r7, #20]
 8001032:	e024      	b.n	800107e <pH_vReadValue+0xae>
	  	 {
	  	 	if(buff[i]>buff[j])
 8001034:	7d7b      	ldrb	r3, [r7, #21]
 8001036:	005b      	lsls	r3, r3, #1
 8001038:	687a      	ldr	r2, [r7, #4]
 800103a:	4413      	add	r3, r2
 800103c:	881a      	ldrh	r2, [r3, #0]
 800103e:	7d3b      	ldrb	r3, [r7, #20]
 8001040:	005b      	lsls	r3, r3, #1
 8001042:	6879      	ldr	r1, [r7, #4]
 8001044:	440b      	add	r3, r1
 8001046:	881b      	ldrh	r3, [r3, #0]
 8001048:	429a      	cmp	r2, r3
 800104a:	d915      	bls.n	8001078 <pH_vReadValue+0xa8>
	  	 	{
	  	 		temp = buff[i];
 800104c:	7d7b      	ldrb	r3, [r7, #21]
 800104e:	005b      	lsls	r3, r3, #1
 8001050:	687a      	ldr	r2, [r7, #4]
 8001052:	4413      	add	r3, r2
 8001054:	881b      	ldrh	r3, [r3, #0]
 8001056:	827b      	strh	r3, [r7, #18]
	  	 		buff[i] = buff[j];
 8001058:	7d3b      	ldrb	r3, [r7, #20]
 800105a:	005b      	lsls	r3, r3, #1
 800105c:	687a      	ldr	r2, [r7, #4]
 800105e:	441a      	add	r2, r3
 8001060:	7d7b      	ldrb	r3, [r7, #21]
 8001062:	005b      	lsls	r3, r3, #1
 8001064:	6879      	ldr	r1, [r7, #4]
 8001066:	440b      	add	r3, r1
 8001068:	8812      	ldrh	r2, [r2, #0]
 800106a:	801a      	strh	r2, [r3, #0]
	  	 		buff[j] = temp;
 800106c:	7d3b      	ldrb	r3, [r7, #20]
 800106e:	005b      	lsls	r3, r3, #1
 8001070:	687a      	ldr	r2, [r7, #4]
 8001072:	4413      	add	r3, r2
 8001074:	8a7a      	ldrh	r2, [r7, #18]
 8001076:	801a      	strh	r2, [r3, #0]
	  	 for(j=i+1;j<10;j++)
 8001078:	7d3b      	ldrb	r3, [r7, #20]
 800107a:	3301      	adds	r3, #1
 800107c:	753b      	strb	r3, [r7, #20]
 800107e:	7d3b      	ldrb	r3, [r7, #20]
 8001080:	2b09      	cmp	r3, #9
 8001082:	d9d7      	bls.n	8001034 <pH_vReadValue+0x64>
	  for(i=0;i<9;i++)
 8001084:	7d7b      	ldrb	r3, [r7, #21]
 8001086:	3301      	adds	r3, #1
 8001088:	757b      	strb	r3, [r7, #21]
 800108a:	7d7b      	ldrb	r3, [r7, #21]
 800108c:	2b08      	cmp	r3, #8
 800108e:	d9cd      	bls.n	800102c <pH_vReadValue+0x5c>
	  	 	}
	  	 }
	  }
	   average =0;
 8001090:	2300      	movs	r3, #0
 8001092:	82fb      	strh	r3, [r7, #22]
	   for(i =2;i<8;i++)
 8001094:	2302      	movs	r3, #2
 8001096:	757b      	strb	r3, [r7, #21]
 8001098:	e00a      	b.n	80010b0 <pH_vReadValue+0xe0>
	   {
	    	average += buff[i];
 800109a:	7d7b      	ldrb	r3, [r7, #21]
 800109c:	005b      	lsls	r3, r3, #1
 800109e:	687a      	ldr	r2, [r7, #4]
 80010a0:	4413      	add	r3, r2
 80010a2:	881a      	ldrh	r2, [r3, #0]
 80010a4:	8afb      	ldrh	r3, [r7, #22]
 80010a6:	4413      	add	r3, r2
 80010a8:	82fb      	strh	r3, [r7, #22]
	   for(i =2;i<8;i++)
 80010aa:	7d7b      	ldrb	r3, [r7, #21]
 80010ac:	3301      	adds	r3, #1
 80010ae:	757b      	strb	r3, [r7, #21]
 80010b0:	7d7b      	ldrb	r3, [r7, #21]
 80010b2:	2b07      	cmp	r3, #7
 80010b4:	d9f1      	bls.n	800109a <pH_vReadValue+0xca>
	   }
	   ph_value = (float)average*3.3/4096/6;
 80010b6:	8afb      	ldrh	r3, [r7, #22]
 80010b8:	4618      	mov	r0, r3
 80010ba:	f7ff fdd1 	bl	8000c60 <__aeabi_ui2f>
 80010be:	4603      	mov	r3, r0
 80010c0:	4618      	mov	r0, r3
 80010c2:	f7ff fa5d 	bl	8000580 <__aeabi_f2d>
 80010c6:	a31e      	add	r3, pc, #120	; (adr r3, 8001140 <pH_vReadValue+0x170>)
 80010c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010cc:	f7ff fab0 	bl	8000630 <__aeabi_dmul>
 80010d0:	4602      	mov	r2, r0
 80010d2:	460b      	mov	r3, r1
 80010d4:	4610      	mov	r0, r2
 80010d6:	4619      	mov	r1, r3
 80010d8:	f04f 0200 	mov.w	r2, #0
 80010dc:	4b1f      	ldr	r3, [pc, #124]	; (800115c <pH_vReadValue+0x18c>)
 80010de:	f7ff fbd1 	bl	8000884 <__aeabi_ddiv>
 80010e2:	4602      	mov	r2, r0
 80010e4:	460b      	mov	r3, r1
 80010e6:	4610      	mov	r0, r2
 80010e8:	4619      	mov	r1, r3
 80010ea:	f04f 0200 	mov.w	r2, #0
 80010ee:	4b1c      	ldr	r3, [pc, #112]	; (8001160 <pH_vReadValue+0x190>)
 80010f0:	f7ff fbc8 	bl	8000884 <__aeabi_ddiv>
 80010f4:	4602      	mov	r2, r0
 80010f6:	460b      	mov	r3, r1
 80010f8:	4610      	mov	r0, r2
 80010fa:	4619      	mov	r1, r3
 80010fc:	f7ff fcaa 	bl	8000a54 <__aeabi_d2f>
 8001100:	4603      	mov	r3, r0
 8001102:	60fb      	str	r3, [r7, #12]
	   *Copy_f32pHValue = (-5.70*ph_value) + Calibration;
 8001104:	68f8      	ldr	r0, [r7, #12]
 8001106:	f7ff fa3b 	bl	8000580 <__aeabi_f2d>
 800110a:	a30f      	add	r3, pc, #60	; (adr r3, 8001148 <pH_vReadValue+0x178>)
 800110c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001110:	f7ff fa8e 	bl	8000630 <__aeabi_dmul>
 8001114:	4602      	mov	r2, r0
 8001116:	460b      	mov	r3, r1
 8001118:	4610      	mov	r0, r2
 800111a:	4619      	mov	r1, r3
 800111c:	a30c      	add	r3, pc, #48	; (adr r3, 8001150 <pH_vReadValue+0x180>)
 800111e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001122:	f7ff f8cf 	bl	80002c4 <__adddf3>
 8001126:	4602      	mov	r2, r0
 8001128:	460b      	mov	r3, r1
 800112a:	4610      	mov	r0, r2
 800112c:	4619      	mov	r1, r3
 800112e:	f7ff fc91 	bl	8000a54 <__aeabi_d2f>
 8001132:	4602      	mov	r2, r0
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	601a      	str	r2, [r3, #0]
}
 8001138:	bf00      	nop
 800113a:	3718      	adds	r7, #24
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	66666666 	.word	0x66666666
 8001144:	400a6666 	.word	0x400a6666
 8001148:	cccccccd 	.word	0xcccccccd
 800114c:	c016cccc 	.word	0xc016cccc
 8001150:	7ae147ae 	.word	0x7ae147ae
 8001154:	402cae14 	.word	0x402cae14
 8001158:	20000028 	.word	0x20000028
 800115c:	40b00000 	.word	0x40b00000
 8001160:	40180000 	.word	0x40180000

08001164 <ConvertToString>:
void ConvertToString(float Copy_fnum,char*PtrArray)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
 800116c:	6039      	str	r1, [r7, #0]
    uint16_t Local_s16iter;
    uint16_t Local_u8num;
    Local_u8num = Copy_fnum;
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	f7ff fdce 	bl	8000d10 <__aeabi_f2uiz>
 8001174:	4603      	mov	r3, r0
 8001176:	81bb      	strh	r3, [r7, #12]
    if(Local_u8num<10)
 8001178:	89bb      	ldrh	r3, [r7, #12]
 800117a:	2b09      	cmp	r3, #9
 800117c:	d80a      	bhi.n	8001194 <ConvertToString+0x30>
    {
        PtrArray[0] = Local_u8num + '0';
 800117e:	89bb      	ldrh	r3, [r7, #12]
 8001180:	b2db      	uxtb	r3, r3
 8001182:	3330      	adds	r3, #48	; 0x30
 8001184:	b2da      	uxtb	r2, r3
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	701a      	strb	r2, [r3, #0]
        PtrArray[1] = '.';
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	3301      	adds	r3, #1
 800118e:	222e      	movs	r2, #46	; 0x2e
 8001190:	701a      	strb	r2, [r3, #0]
          PtrArray[Local_s16iter] = (Local_u8num%10)+ '0';
          Local_u8num = Local_u8num /10;
          Local_s16iter--;
        }
    }
}
 8001192:	e049      	b.n	8001228 <ConvertToString+0xc4>
    else if(Local_u8num<100)
 8001194:	89bb      	ldrh	r3, [r7, #12]
 8001196:	2b63      	cmp	r3, #99	; 0x63
 8001198:	d821      	bhi.n	80011de <ConvertToString+0x7a>
        Local_s16iter=1;
 800119a:	2301      	movs	r3, #1
 800119c:	81fb      	strh	r3, [r7, #14]
        PtrArray[2] = '.';
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	3302      	adds	r3, #2
 80011a2:	222e      	movs	r2, #46	; 0x2e
 80011a4:	701a      	strb	r2, [r3, #0]
           PtrArray[Local_s16iter] = (Local_u8num%10)+ '0';
 80011a6:	89ba      	ldrh	r2, [r7, #12]
 80011a8:	4b21      	ldr	r3, [pc, #132]	; (8001230 <ConvertToString+0xcc>)
 80011aa:	fba3 1302 	umull	r1, r3, r3, r2
 80011ae:	08d9      	lsrs	r1, r3, #3
 80011b0:	460b      	mov	r3, r1
 80011b2:	009b      	lsls	r3, r3, #2
 80011b4:	440b      	add	r3, r1
 80011b6:	005b      	lsls	r3, r3, #1
 80011b8:	1ad3      	subs	r3, r2, r3
 80011ba:	b29b      	uxth	r3, r3
 80011bc:	b2da      	uxtb	r2, r3
 80011be:	89fb      	ldrh	r3, [r7, #14]
 80011c0:	6839      	ldr	r1, [r7, #0]
 80011c2:	440b      	add	r3, r1
 80011c4:	3230      	adds	r2, #48	; 0x30
 80011c6:	b2d2      	uxtb	r2, r2
 80011c8:	701a      	strb	r2, [r3, #0]
           Local_u8num = Local_u8num /10;
 80011ca:	89bb      	ldrh	r3, [r7, #12]
 80011cc:	4a18      	ldr	r2, [pc, #96]	; (8001230 <ConvertToString+0xcc>)
 80011ce:	fba2 2303 	umull	r2, r3, r2, r3
 80011d2:	08db      	lsrs	r3, r3, #3
 80011d4:	81bb      	strh	r3, [r7, #12]
            Local_s16iter--;
 80011d6:	89fb      	ldrh	r3, [r7, #14]
 80011d8:	3b01      	subs	r3, #1
 80011da:	81fb      	strh	r3, [r7, #14]
           PtrArray[Local_s16iter] = (Local_u8num%10)+ '0';
 80011dc:	e7e3      	b.n	80011a6 <ConvertToString+0x42>
    else if(Local_u8num>99)
 80011de:	89bb      	ldrh	r3, [r7, #12]
 80011e0:	2b63      	cmp	r3, #99	; 0x63
 80011e2:	d921      	bls.n	8001228 <ConvertToString+0xc4>
        Local_s16iter=2;
 80011e4:	2302      	movs	r3, #2
 80011e6:	81fb      	strh	r3, [r7, #14]
        PtrArray[3] = '.';
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	3303      	adds	r3, #3
 80011ec:	222e      	movs	r2, #46	; 0x2e
 80011ee:	701a      	strb	r2, [r3, #0]
          PtrArray[Local_s16iter] = (Local_u8num%10)+ '0';
 80011f0:	89ba      	ldrh	r2, [r7, #12]
 80011f2:	4b0f      	ldr	r3, [pc, #60]	; (8001230 <ConvertToString+0xcc>)
 80011f4:	fba3 1302 	umull	r1, r3, r3, r2
 80011f8:	08d9      	lsrs	r1, r3, #3
 80011fa:	460b      	mov	r3, r1
 80011fc:	009b      	lsls	r3, r3, #2
 80011fe:	440b      	add	r3, r1
 8001200:	005b      	lsls	r3, r3, #1
 8001202:	1ad3      	subs	r3, r2, r3
 8001204:	b29b      	uxth	r3, r3
 8001206:	b2da      	uxtb	r2, r3
 8001208:	89fb      	ldrh	r3, [r7, #14]
 800120a:	6839      	ldr	r1, [r7, #0]
 800120c:	440b      	add	r3, r1
 800120e:	3230      	adds	r2, #48	; 0x30
 8001210:	b2d2      	uxtb	r2, r2
 8001212:	701a      	strb	r2, [r3, #0]
          Local_u8num = Local_u8num /10;
 8001214:	89bb      	ldrh	r3, [r7, #12]
 8001216:	4a06      	ldr	r2, [pc, #24]	; (8001230 <ConvertToString+0xcc>)
 8001218:	fba2 2303 	umull	r2, r3, r2, r3
 800121c:	08db      	lsrs	r3, r3, #3
 800121e:	81bb      	strh	r3, [r7, #12]
          Local_s16iter--;
 8001220:	89fb      	ldrh	r3, [r7, #14]
 8001222:	3b01      	subs	r3, #1
 8001224:	81fb      	strh	r3, [r7, #14]
          PtrArray[Local_s16iter] = (Local_u8num%10)+ '0';
 8001226:	e7e3      	b.n	80011f0 <ConvertToString+0x8c>
}
 8001228:	bf00      	nop
 800122a:	3710      	adds	r7, #16
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	cccccccd 	.word	0xcccccccd

08001234 <ConverFracToString>:
void ConverFracToString(float x,char*PtrArray,char*index)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b086      	sub	sp, #24
 8001238:	af00      	add	r7, sp, #0
 800123a:	60f8      	str	r0, [r7, #12]
 800123c:	60b9      	str	r1, [r7, #8]
 800123e:	607a      	str	r2, [r7, #4]
   uint8_t temp1;
   uint8_t temp2;
   uint8_t num;
    temp1 = x ;
 8001240:	68f8      	ldr	r0, [r7, #12]
 8001242:	f7ff fd65 	bl	8000d10 <__aeabi_f2uiz>
 8001246:	4603      	mov	r3, r0
 8001248:	75fb      	strb	r3, [r7, #23]
    x = x - temp1;
 800124a:	7dfb      	ldrb	r3, [r7, #23]
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff fd0b 	bl	8000c68 <__aeabi_i2f>
 8001252:	4603      	mov	r3, r0
 8001254:	4619      	mov	r1, r3
 8001256:	68f8      	ldr	r0, [r7, #12]
 8001258:	f7ff fc50 	bl	8000afc <__aeabi_fsub>
 800125c:	4603      	mov	r3, r0
 800125e:	60fb      	str	r3, [r7, #12]
    num  = x*100;
 8001260:	4931      	ldr	r1, [pc, #196]	; (8001328 <ConverFracToString+0xf4>)
 8001262:	68f8      	ldr	r0, [r7, #12]
 8001264:	f7fe ff74 	bl	8000150 <__aeabi_fmul>
 8001268:	4603      	mov	r3, r0
 800126a:	4618      	mov	r0, r3
 800126c:	f7ff fd50 	bl	8000d10 <__aeabi_f2uiz>
 8001270:	4603      	mov	r3, r0
 8001272:	75bb      	strb	r3, [r7, #22]
    temp2 = num%10;
 8001274:	7dba      	ldrb	r2, [r7, #22]
 8001276:	4b2d      	ldr	r3, [pc, #180]	; (800132c <ConverFracToString+0xf8>)
 8001278:	fba3 1302 	umull	r1, r3, r3, r2
 800127c:	08d9      	lsrs	r1, r3, #3
 800127e:	460b      	mov	r3, r1
 8001280:	009b      	lsls	r3, r3, #2
 8001282:	440b      	add	r3, r1
 8001284:	005b      	lsls	r3, r3, #1
 8001286:	1ad3      	subs	r3, r2, r3
 8001288:	757b      	strb	r3, [r7, #21]
    num = num /10;
 800128a:	7dbb      	ldrb	r3, [r7, #22]
 800128c:	4a27      	ldr	r2, [pc, #156]	; (800132c <ConverFracToString+0xf8>)
 800128e:	fba2 2303 	umull	r2, r3, r2, r3
 8001292:	08db      	lsrs	r3, r3, #3
 8001294:	75bb      	strb	r3, [r7, #22]
    if(temp1<10)
 8001296:	7dfb      	ldrb	r3, [r7, #23]
 8001298:	2b09      	cmp	r3, #9
 800129a:	d813      	bhi.n	80012c4 <ConverFracToString+0x90>
    {
        PtrArray[2] = num  + '0';
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	3302      	adds	r3, #2
 80012a0:	7dba      	ldrb	r2, [r7, #22]
 80012a2:	3230      	adds	r2, #48	; 0x30
 80012a4:	b2d2      	uxtb	r2, r2
 80012a6:	701a      	strb	r2, [r3, #0]
        PtrArray[3] = temp2 + '0';
 80012a8:	68bb      	ldr	r3, [r7, #8]
 80012aa:	3303      	adds	r3, #3
 80012ac:	7d7a      	ldrb	r2, [r7, #21]
 80012ae:	3230      	adds	r2, #48	; 0x30
 80012b0:	b2d2      	uxtb	r2, r2
 80012b2:	701a      	strb	r2, [r3, #0]
        PtrArray[4] = '\0';
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	3304      	adds	r3, #4
 80012b8:	2200      	movs	r2, #0
 80012ba:	701a      	strb	r2, [r3, #0]
        *index = 3;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2203      	movs	r2, #3
 80012c0:	701a      	strb	r2, [r3, #0]
        PtrArray[4] = num  + '0';
        PtrArray[5] = temp2 + '0';
        PtrArray[6] = '\0';
        *index = 5;
     }
}
 80012c2:	e02c      	b.n	800131e <ConverFracToString+0xea>
    else if(temp1<100)
 80012c4:	7dfb      	ldrb	r3, [r7, #23]
 80012c6:	2b63      	cmp	r3, #99	; 0x63
 80012c8:	d813      	bhi.n	80012f2 <ConverFracToString+0xbe>
        PtrArray[3] = num  + '0';
 80012ca:	68bb      	ldr	r3, [r7, #8]
 80012cc:	3303      	adds	r3, #3
 80012ce:	7dba      	ldrb	r2, [r7, #22]
 80012d0:	3230      	adds	r2, #48	; 0x30
 80012d2:	b2d2      	uxtb	r2, r2
 80012d4:	701a      	strb	r2, [r3, #0]
        PtrArray[4] = temp2 + '0';
 80012d6:	68bb      	ldr	r3, [r7, #8]
 80012d8:	3304      	adds	r3, #4
 80012da:	7d7a      	ldrb	r2, [r7, #21]
 80012dc:	3230      	adds	r2, #48	; 0x30
 80012de:	b2d2      	uxtb	r2, r2
 80012e0:	701a      	strb	r2, [r3, #0]
        PtrArray[5] = '\0';
 80012e2:	68bb      	ldr	r3, [r7, #8]
 80012e4:	3305      	adds	r3, #5
 80012e6:	2200      	movs	r2, #0
 80012e8:	701a      	strb	r2, [r3, #0]
        *index = 4;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2204      	movs	r2, #4
 80012ee:	701a      	strb	r2, [r3, #0]
}
 80012f0:	e015      	b.n	800131e <ConverFracToString+0xea>
    else if(temp1>99)
 80012f2:	7dfb      	ldrb	r3, [r7, #23]
 80012f4:	2b63      	cmp	r3, #99	; 0x63
 80012f6:	d912      	bls.n	800131e <ConverFracToString+0xea>
        PtrArray[4] = num  + '0';
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	3304      	adds	r3, #4
 80012fc:	7dba      	ldrb	r2, [r7, #22]
 80012fe:	3230      	adds	r2, #48	; 0x30
 8001300:	b2d2      	uxtb	r2, r2
 8001302:	701a      	strb	r2, [r3, #0]
        PtrArray[5] = temp2 + '0';
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	3305      	adds	r3, #5
 8001308:	7d7a      	ldrb	r2, [r7, #21]
 800130a:	3230      	adds	r2, #48	; 0x30
 800130c:	b2d2      	uxtb	r2, r2
 800130e:	701a      	strb	r2, [r3, #0]
        PtrArray[6] = '\0';
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	3306      	adds	r3, #6
 8001314:	2200      	movs	r2, #0
 8001316:	701a      	strb	r2, [r3, #0]
        *index = 5;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2205      	movs	r2, #5
 800131c:	701a      	strb	r2, [r3, #0]
}
 800131e:	bf00      	nop
 8001320:	3718      	adds	r7, #24
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	42c80000 	.word	0x42c80000
 800132c:	cccccccd 	.word	0xcccccccd

08001330 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001330:	b480      	push	{r7}
 8001332:	b085      	sub	sp, #20
 8001334:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001336:	4b15      	ldr	r3, [pc, #84]	; (800138c <HAL_MspInit+0x5c>)
 8001338:	699b      	ldr	r3, [r3, #24]
 800133a:	4a14      	ldr	r2, [pc, #80]	; (800138c <HAL_MspInit+0x5c>)
 800133c:	f043 0301 	orr.w	r3, r3, #1
 8001340:	6193      	str	r3, [r2, #24]
 8001342:	4b12      	ldr	r3, [pc, #72]	; (800138c <HAL_MspInit+0x5c>)
 8001344:	699b      	ldr	r3, [r3, #24]
 8001346:	f003 0301 	and.w	r3, r3, #1
 800134a:	60bb      	str	r3, [r7, #8]
 800134c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800134e:	4b0f      	ldr	r3, [pc, #60]	; (800138c <HAL_MspInit+0x5c>)
 8001350:	69db      	ldr	r3, [r3, #28]
 8001352:	4a0e      	ldr	r2, [pc, #56]	; (800138c <HAL_MspInit+0x5c>)
 8001354:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001358:	61d3      	str	r3, [r2, #28]
 800135a:	4b0c      	ldr	r3, [pc, #48]	; (800138c <HAL_MspInit+0x5c>)
 800135c:	69db      	ldr	r3, [r3, #28]
 800135e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001362:	607b      	str	r3, [r7, #4]
 8001364:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001366:	4b0a      	ldr	r3, [pc, #40]	; (8001390 <HAL_MspInit+0x60>)
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	60fb      	str	r3, [r7, #12]
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001372:	60fb      	str	r3, [r7, #12]
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800137a:	60fb      	str	r3, [r7, #12]
 800137c:	4a04      	ldr	r2, [pc, #16]	; (8001390 <HAL_MspInit+0x60>)
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001382:	bf00      	nop
 8001384:	3714      	adds	r7, #20
 8001386:	46bd      	mov	sp, r7
 8001388:	bc80      	pop	{r7}
 800138a:	4770      	bx	lr
 800138c:	40021000 	.word	0x40021000
 8001390:	40010000 	.word	0x40010000

08001394 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b088      	sub	sp, #32
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800139c:	f107 0310 	add.w	r3, r7, #16
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]
 80013a4:	605a      	str	r2, [r3, #4]
 80013a6:	609a      	str	r2, [r3, #8]
 80013a8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a14      	ldr	r2, [pc, #80]	; (8001400 <HAL_ADC_MspInit+0x6c>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d121      	bne.n	80013f8 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80013b4:	4b13      	ldr	r3, [pc, #76]	; (8001404 <HAL_ADC_MspInit+0x70>)
 80013b6:	699b      	ldr	r3, [r3, #24]
 80013b8:	4a12      	ldr	r2, [pc, #72]	; (8001404 <HAL_ADC_MspInit+0x70>)
 80013ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013be:	6193      	str	r3, [r2, #24]
 80013c0:	4b10      	ldr	r3, [pc, #64]	; (8001404 <HAL_ADC_MspInit+0x70>)
 80013c2:	699b      	ldr	r3, [r3, #24]
 80013c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013c8:	60fb      	str	r3, [r7, #12]
 80013ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013cc:	4b0d      	ldr	r3, [pc, #52]	; (8001404 <HAL_ADC_MspInit+0x70>)
 80013ce:	699b      	ldr	r3, [r3, #24]
 80013d0:	4a0c      	ldr	r2, [pc, #48]	; (8001404 <HAL_ADC_MspInit+0x70>)
 80013d2:	f043 0304 	orr.w	r3, r3, #4
 80013d6:	6193      	str	r3, [r2, #24]
 80013d8:	4b0a      	ldr	r3, [pc, #40]	; (8001404 <HAL_ADC_MspInit+0x70>)
 80013da:	699b      	ldr	r3, [r3, #24]
 80013dc:	f003 0304 	and.w	r3, r3, #4
 80013e0:	60bb      	str	r3, [r7, #8]
 80013e2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80013e4:	2320      	movs	r3, #32
 80013e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013e8:	2303      	movs	r3, #3
 80013ea:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ec:	f107 0310 	add.w	r3, r7, #16
 80013f0:	4619      	mov	r1, r3
 80013f2:	4805      	ldr	r0, [pc, #20]	; (8001408 <HAL_ADC_MspInit+0x74>)
 80013f4:	f000 fe6a 	bl	80020cc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80013f8:	bf00      	nop
 80013fa:	3720      	adds	r7, #32
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	40012400 	.word	0x40012400
 8001404:	40021000 	.word	0x40021000
 8001408:	40010800 	.word	0x40010800

0800140c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b088      	sub	sp, #32
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001414:	f107 0310 	add.w	r3, r7, #16
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]
 800141c:	605a      	str	r2, [r3, #4]
 800141e:	609a      	str	r2, [r3, #8]
 8001420:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a1b      	ldr	r2, [pc, #108]	; (8001494 <HAL_UART_MspInit+0x88>)
 8001428:	4293      	cmp	r3, r2
 800142a:	d12f      	bne.n	800148c <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800142c:	4b1a      	ldr	r3, [pc, #104]	; (8001498 <HAL_UART_MspInit+0x8c>)
 800142e:	69db      	ldr	r3, [r3, #28]
 8001430:	4a19      	ldr	r2, [pc, #100]	; (8001498 <HAL_UART_MspInit+0x8c>)
 8001432:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001436:	61d3      	str	r3, [r2, #28]
 8001438:	4b17      	ldr	r3, [pc, #92]	; (8001498 <HAL_UART_MspInit+0x8c>)
 800143a:	69db      	ldr	r3, [r3, #28]
 800143c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001440:	60fb      	str	r3, [r7, #12]
 8001442:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001444:	4b14      	ldr	r3, [pc, #80]	; (8001498 <HAL_UART_MspInit+0x8c>)
 8001446:	699b      	ldr	r3, [r3, #24]
 8001448:	4a13      	ldr	r2, [pc, #76]	; (8001498 <HAL_UART_MspInit+0x8c>)
 800144a:	f043 0304 	orr.w	r3, r3, #4
 800144e:	6193      	str	r3, [r2, #24]
 8001450:	4b11      	ldr	r3, [pc, #68]	; (8001498 <HAL_UART_MspInit+0x8c>)
 8001452:	699b      	ldr	r3, [r3, #24]
 8001454:	f003 0304 	and.w	r3, r3, #4
 8001458:	60bb      	str	r3, [r7, #8]
 800145a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800145c:	2304      	movs	r3, #4
 800145e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001460:	2302      	movs	r3, #2
 8001462:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001464:	2303      	movs	r3, #3
 8001466:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001468:	f107 0310 	add.w	r3, r7, #16
 800146c:	4619      	mov	r1, r3
 800146e:	480b      	ldr	r0, [pc, #44]	; (800149c <HAL_UART_MspInit+0x90>)
 8001470:	f000 fe2c 	bl	80020cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001474:	2308      	movs	r3, #8
 8001476:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001478:	2300      	movs	r3, #0
 800147a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147c:	2300      	movs	r3, #0
 800147e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001480:	f107 0310 	add.w	r3, r7, #16
 8001484:	4619      	mov	r1, r3
 8001486:	4805      	ldr	r0, [pc, #20]	; (800149c <HAL_UART_MspInit+0x90>)
 8001488:	f000 fe20 	bl	80020cc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800148c:	bf00      	nop
 800148e:	3720      	adds	r7, #32
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	40004400 	.word	0x40004400
 8001498:	40021000 	.word	0x40021000
 800149c:	40010800 	.word	0x40010800

080014a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014a4:	e7fe      	b.n	80014a4 <NMI_Handler+0x4>

080014a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014a6:	b480      	push	{r7}
 80014a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014aa:	e7fe      	b.n	80014aa <HardFault_Handler+0x4>

080014ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014b0:	e7fe      	b.n	80014b0 <MemManage_Handler+0x4>

080014b2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014b2:	b480      	push	{r7}
 80014b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014b6:	e7fe      	b.n	80014b6 <BusFault_Handler+0x4>

080014b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014bc:	e7fe      	b.n	80014bc <UsageFault_Handler+0x4>

080014be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014be:	b480      	push	{r7}
 80014c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014c2:	bf00      	nop
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bc80      	pop	{r7}
 80014c8:	4770      	bx	lr

080014ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014ca:	b480      	push	{r7}
 80014cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014ce:	bf00      	nop
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bc80      	pop	{r7}
 80014d4:	4770      	bx	lr

080014d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014d6:	b480      	push	{r7}
 80014d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014da:	bf00      	nop
 80014dc:	46bd      	mov	sp, r7
 80014de:	bc80      	pop	{r7}
 80014e0:	4770      	bx	lr

080014e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014e2:	b580      	push	{r7, lr}
 80014e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014e6:	f000 f875 	bl	80015d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014ea:	bf00      	nop
 80014ec:	bd80      	pop	{r7, pc}

080014ee <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014ee:	b480      	push	{r7}
 80014f0:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014f2:	bf00      	nop
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bc80      	pop	{r7}
 80014f8:	4770      	bx	lr
	...

080014fc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80014fc:	f7ff fff7 	bl	80014ee <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001500:	480b      	ldr	r0, [pc, #44]	; (8001530 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001502:	490c      	ldr	r1, [pc, #48]	; (8001534 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001504:	4a0c      	ldr	r2, [pc, #48]	; (8001538 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001506:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001508:	e002      	b.n	8001510 <LoopCopyDataInit>

0800150a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800150a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800150c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800150e:	3304      	adds	r3, #4

08001510 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001510:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001512:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001514:	d3f9      	bcc.n	800150a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001516:	4a09      	ldr	r2, [pc, #36]	; (800153c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001518:	4c09      	ldr	r4, [pc, #36]	; (8001540 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800151a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800151c:	e001      	b.n	8001522 <LoopFillZerobss>

0800151e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800151e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001520:	3204      	adds	r2, #4

08001522 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001522:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001524:	d3fb      	bcc.n	800151e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001526:	f001 fec1 	bl	80032ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800152a:	f7ff fd21 	bl	8000f70 <main>
  bx lr
 800152e:	4770      	bx	lr
  ldr r0, =_sdata
 8001530:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001534:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001538:	08003354 	.word	0x08003354
  ldr r2, =_sbss
 800153c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001540:	200000c8 	.word	0x200000c8

08001544 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001544:	e7fe      	b.n	8001544 <ADC1_2_IRQHandler>
	...

08001548 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800154c:	4b08      	ldr	r3, [pc, #32]	; (8001570 <HAL_Init+0x28>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a07      	ldr	r2, [pc, #28]	; (8001570 <HAL_Init+0x28>)
 8001552:	f043 0310 	orr.w	r3, r3, #16
 8001556:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001558:	2003      	movs	r0, #3
 800155a:	f000 fd83 	bl	8002064 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800155e:	200f      	movs	r0, #15
 8001560:	f000 f808 	bl	8001574 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001564:	f7ff fee4 	bl	8001330 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001568:	2300      	movs	r3, #0
}
 800156a:	4618      	mov	r0, r3
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	40022000 	.word	0x40022000

08001574 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800157c:	4b12      	ldr	r3, [pc, #72]	; (80015c8 <HAL_InitTick+0x54>)
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	4b12      	ldr	r3, [pc, #72]	; (80015cc <HAL_InitTick+0x58>)
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	4619      	mov	r1, r3
 8001586:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800158a:	fbb3 f3f1 	udiv	r3, r3, r1
 800158e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001592:	4618      	mov	r0, r3
 8001594:	f000 fd8d 	bl	80020b2 <HAL_SYSTICK_Config>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e00e      	b.n	80015c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2b0f      	cmp	r3, #15
 80015a6:	d80a      	bhi.n	80015be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015a8:	2200      	movs	r2, #0
 80015aa:	6879      	ldr	r1, [r7, #4]
 80015ac:	f04f 30ff 	mov.w	r0, #4294967295
 80015b0:	f000 fd63 	bl	800207a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015b4:	4a06      	ldr	r2, [pc, #24]	; (80015d0 <HAL_InitTick+0x5c>)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015ba:	2300      	movs	r3, #0
 80015bc:	e000      	b.n	80015c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3708      	adds	r7, #8
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	20000000 	.word	0x20000000
 80015cc:	20000008 	.word	0x20000008
 80015d0:	20000004 	.word	0x20000004

080015d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015d8:	4b05      	ldr	r3, [pc, #20]	; (80015f0 <HAL_IncTick+0x1c>)
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	461a      	mov	r2, r3
 80015de:	4b05      	ldr	r3, [pc, #20]	; (80015f4 <HAL_IncTick+0x20>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4413      	add	r3, r2
 80015e4:	4a03      	ldr	r2, [pc, #12]	; (80015f4 <HAL_IncTick+0x20>)
 80015e6:	6013      	str	r3, [r2, #0]
}
 80015e8:	bf00      	nop
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bc80      	pop	{r7}
 80015ee:	4770      	bx	lr
 80015f0:	20000008 	.word	0x20000008
 80015f4:	200000c4 	.word	0x200000c4

080015f8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  return uwTick;
 80015fc:	4b02      	ldr	r3, [pc, #8]	; (8001608 <HAL_GetTick+0x10>)
 80015fe:	681b      	ldr	r3, [r3, #0]
}
 8001600:	4618      	mov	r0, r3
 8001602:	46bd      	mov	sp, r7
 8001604:	bc80      	pop	{r7}
 8001606:	4770      	bx	lr
 8001608:	200000c4 	.word	0x200000c4

0800160c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b084      	sub	sp, #16
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001614:	f7ff fff0 	bl	80015f8 <HAL_GetTick>
 8001618:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001624:	d005      	beq.n	8001632 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001626:	4b0a      	ldr	r3, [pc, #40]	; (8001650 <HAL_Delay+0x44>)
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	461a      	mov	r2, r3
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	4413      	add	r3, r2
 8001630:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001632:	bf00      	nop
 8001634:	f7ff ffe0 	bl	80015f8 <HAL_GetTick>
 8001638:	4602      	mov	r2, r0
 800163a:	68bb      	ldr	r3, [r7, #8]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	68fa      	ldr	r2, [r7, #12]
 8001640:	429a      	cmp	r2, r3
 8001642:	d8f7      	bhi.n	8001634 <HAL_Delay+0x28>
  {
  }
}
 8001644:	bf00      	nop
 8001646:	bf00      	nop
 8001648:	3710      	adds	r7, #16
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	20000008 	.word	0x20000008

08001654 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b086      	sub	sp, #24
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800165c:	2300      	movs	r3, #0
 800165e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001660:	2300      	movs	r3, #0
 8001662:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001664:	2300      	movs	r3, #0
 8001666:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001668:	2300      	movs	r3, #0
 800166a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d101      	bne.n	8001676 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	e0be      	b.n	80017f4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001680:	2b00      	cmp	r3, #0
 8001682:	d109      	bne.n	8001698 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2200      	movs	r2, #0
 8001688:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2200      	movs	r2, #0
 800168e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f7ff fe7e 	bl	8001394 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	f000 fbf1 	bl	8001e80 <ADC_ConversionStop_Disable>
 800169e:	4603      	mov	r3, r0
 80016a0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016a6:	f003 0310 	and.w	r3, r3, #16
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	f040 8099 	bne.w	80017e2 <HAL_ADC_Init+0x18e>
 80016b0:	7dfb      	ldrb	r3, [r7, #23]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	f040 8095 	bne.w	80017e2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016bc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80016c0:	f023 0302 	bic.w	r3, r3, #2
 80016c4:	f043 0202 	orr.w	r2, r3, #2
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80016d4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	7b1b      	ldrb	r3, [r3, #12]
 80016da:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80016dc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80016de:	68ba      	ldr	r2, [r7, #8]
 80016e0:	4313      	orrs	r3, r2
 80016e2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80016ec:	d003      	beq.n	80016f6 <HAL_ADC_Init+0xa2>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	d102      	bne.n	80016fc <HAL_ADC_Init+0xa8>
 80016f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016fa:	e000      	b.n	80016fe <HAL_ADC_Init+0xaa>
 80016fc:	2300      	movs	r3, #0
 80016fe:	693a      	ldr	r2, [r7, #16]
 8001700:	4313      	orrs	r3, r2
 8001702:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	7d1b      	ldrb	r3, [r3, #20]
 8001708:	2b01      	cmp	r3, #1
 800170a:	d119      	bne.n	8001740 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	7b1b      	ldrb	r3, [r3, #12]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d109      	bne.n	8001728 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	699b      	ldr	r3, [r3, #24]
 8001718:	3b01      	subs	r3, #1
 800171a:	035a      	lsls	r2, r3, #13
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	4313      	orrs	r3, r2
 8001720:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001724:	613b      	str	r3, [r7, #16]
 8001726:	e00b      	b.n	8001740 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800172c:	f043 0220 	orr.w	r2, r3, #32
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001738:	f043 0201 	orr.w	r2, r3, #1
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	693a      	ldr	r2, [r7, #16]
 8001750:	430a      	orrs	r2, r1
 8001752:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	689a      	ldr	r2, [r3, #8]
 800175a:	4b28      	ldr	r3, [pc, #160]	; (80017fc <HAL_ADC_Init+0x1a8>)
 800175c:	4013      	ands	r3, r2
 800175e:	687a      	ldr	r2, [r7, #4]
 8001760:	6812      	ldr	r2, [r2, #0]
 8001762:	68b9      	ldr	r1, [r7, #8]
 8001764:	430b      	orrs	r3, r1
 8001766:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001770:	d003      	beq.n	800177a <HAL_ADC_Init+0x126>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	2b01      	cmp	r3, #1
 8001778:	d104      	bne.n	8001784 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	691b      	ldr	r3, [r3, #16]
 800177e:	3b01      	subs	r3, #1
 8001780:	051b      	lsls	r3, r3, #20
 8001782:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800178a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	68fa      	ldr	r2, [r7, #12]
 8001794:	430a      	orrs	r2, r1
 8001796:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	689a      	ldr	r2, [r3, #8]
 800179e:	4b18      	ldr	r3, [pc, #96]	; (8001800 <HAL_ADC_Init+0x1ac>)
 80017a0:	4013      	ands	r3, r2
 80017a2:	68ba      	ldr	r2, [r7, #8]
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d10b      	bne.n	80017c0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2200      	movs	r2, #0
 80017ac:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017b2:	f023 0303 	bic.w	r3, r3, #3
 80017b6:	f043 0201 	orr.w	r2, r3, #1
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80017be:	e018      	b.n	80017f2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017c4:	f023 0312 	bic.w	r3, r3, #18
 80017c8:	f043 0210 	orr.w	r2, r3, #16
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017d4:	f043 0201 	orr.w	r2, r3, #1
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80017dc:	2301      	movs	r3, #1
 80017de:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80017e0:	e007      	b.n	80017f2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017e6:	f043 0210 	orr.w	r2, r3, #16
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80017f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	3718      	adds	r7, #24
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	ffe1f7fd 	.word	0xffe1f7fd
 8001800:	ff1f0efe 	.word	0xff1f0efe

08001804 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800180c:	2300      	movs	r3, #0
 800180e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001816:	2b01      	cmp	r3, #1
 8001818:	d101      	bne.n	800181e <HAL_ADC_Start+0x1a>
 800181a:	2302      	movs	r3, #2
 800181c:	e098      	b.n	8001950 <HAL_ADC_Start+0x14c>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2201      	movs	r2, #1
 8001822:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	f000 fad0 	bl	8001dcc <ADC_Enable>
 800182c:	4603      	mov	r3, r0
 800182e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001830:	7bfb      	ldrb	r3, [r7, #15]
 8001832:	2b00      	cmp	r3, #0
 8001834:	f040 8087 	bne.w	8001946 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800183c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001840:	f023 0301 	bic.w	r3, r3, #1
 8001844:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a41      	ldr	r2, [pc, #260]	; (8001958 <HAL_ADC_Start+0x154>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d105      	bne.n	8001862 <HAL_ADC_Start+0x5e>
 8001856:	4b41      	ldr	r3, [pc, #260]	; (800195c <HAL_ADC_Start+0x158>)
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800185e:	2b00      	cmp	r3, #0
 8001860:	d115      	bne.n	800188e <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001866:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001878:	2b00      	cmp	r3, #0
 800187a:	d026      	beq.n	80018ca <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001880:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001884:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800188c:	e01d      	b.n	80018ca <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001892:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a2f      	ldr	r2, [pc, #188]	; (800195c <HAL_ADC_Start+0x158>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d004      	beq.n	80018ae <HAL_ADC_Start+0xaa>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a2b      	ldr	r2, [pc, #172]	; (8001958 <HAL_ADC_Start+0x154>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d10d      	bne.n	80018ca <HAL_ADC_Start+0xc6>
 80018ae:	4b2b      	ldr	r3, [pc, #172]	; (800195c <HAL_ADC_Start+0x158>)
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d007      	beq.n	80018ca <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018be:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80018c2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d006      	beq.n	80018e4 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018da:	f023 0206 	bic.w	r2, r3, #6
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	62da      	str	r2, [r3, #44]	; 0x2c
 80018e2:	e002      	b.n	80018ea <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2200      	movs	r2, #0
 80018e8:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2200      	movs	r2, #0
 80018ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f06f 0202 	mvn.w	r2, #2
 80018fa:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001906:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800190a:	d113      	bne.n	8001934 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001910:	4a11      	ldr	r2, [pc, #68]	; (8001958 <HAL_ADC_Start+0x154>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d105      	bne.n	8001922 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001916:	4b11      	ldr	r3, [pc, #68]	; (800195c <HAL_ADC_Start+0x158>)
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800191e:	2b00      	cmp	r3, #0
 8001920:	d108      	bne.n	8001934 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	689a      	ldr	r2, [r3, #8]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001930:	609a      	str	r2, [r3, #8]
 8001932:	e00c      	b.n	800194e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	689a      	ldr	r2, [r3, #8]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001942:	609a      	str	r2, [r3, #8]
 8001944:	e003      	b.n	800194e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2200      	movs	r2, #0
 800194a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800194e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001950:	4618      	mov	r0, r3
 8001952:	3710      	adds	r7, #16
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	40012800 	.word	0x40012800
 800195c:	40012400 	.word	0x40012400

08001960 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b084      	sub	sp, #16
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001968:	2300      	movs	r3, #0
 800196a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001972:	2b01      	cmp	r3, #1
 8001974:	d101      	bne.n	800197a <HAL_ADC_Stop+0x1a>
 8001976:	2302      	movs	r3, #2
 8001978:	e01a      	b.n	80019b0 <HAL_ADC_Stop+0x50>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2201      	movs	r2, #1
 800197e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f000 fa7c 	bl	8001e80 <ADC_ConversionStop_Disable>
 8001988:	4603      	mov	r3, r0
 800198a:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800198c:	7bfb      	ldrb	r3, [r7, #15]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d109      	bne.n	80019a6 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001996:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800199a:	f023 0301 	bic.w	r3, r3, #1
 800199e:	f043 0201 	orr.w	r2, r3, #1
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2200      	movs	r2, #0
 80019aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80019ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	3710      	adds	r7, #16
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}

080019b8 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80019b8:	b590      	push	{r4, r7, lr}
 80019ba:	b087      	sub	sp, #28
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
 80019c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80019c2:	2300      	movs	r3, #0
 80019c4:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80019c6:	2300      	movs	r3, #0
 80019c8:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80019ca:	2300      	movs	r3, #0
 80019cc:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80019ce:	f7ff fe13 	bl	80015f8 <HAL_GetTick>
 80019d2:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d00b      	beq.n	80019fa <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019e6:	f043 0220 	orr.w	r2, r3, #32
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2200      	movs	r2, #0
 80019f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e0d3      	b.n	8001ba2 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d131      	bne.n	8001a6c <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a0e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d12a      	bne.n	8001a6c <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001a16:	e021      	b.n	8001a5c <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a1e:	d01d      	beq.n	8001a5c <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d007      	beq.n	8001a36 <HAL_ADC_PollForConversion+0x7e>
 8001a26:	f7ff fde7 	bl	80015f8 <HAL_GetTick>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	1ad3      	subs	r3, r2, r3
 8001a30:	683a      	ldr	r2, [r7, #0]
 8001a32:	429a      	cmp	r2, r3
 8001a34:	d212      	bcs.n	8001a5c <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 0302 	and.w	r3, r3, #2
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d10b      	bne.n	8001a5c <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a48:	f043 0204 	orr.w	r2, r3, #4
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2200      	movs	r2, #0
 8001a54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8001a58:	2303      	movs	r3, #3
 8001a5a:	e0a2      	b.n	8001ba2 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 0302 	and.w	r3, r3, #2
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d0d6      	beq.n	8001a18 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001a6a:	e070      	b.n	8001b4e <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001a6c:	4b4f      	ldr	r3, [pc, #316]	; (8001bac <HAL_ADC_PollForConversion+0x1f4>)
 8001a6e:	681c      	ldr	r4, [r3, #0]
 8001a70:	2002      	movs	r0, #2
 8001a72:	f001 f98d 	bl	8002d90 <HAL_RCCEx_GetPeriphCLKFreq>
 8001a76:	4603      	mov	r3, r0
 8001a78:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	6919      	ldr	r1, [r3, #16]
 8001a82:	4b4b      	ldr	r3, [pc, #300]	; (8001bb0 <HAL_ADC_PollForConversion+0x1f8>)
 8001a84:	400b      	ands	r3, r1
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d118      	bne.n	8001abc <HAL_ADC_PollForConversion+0x104>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	68d9      	ldr	r1, [r3, #12]
 8001a90:	4b48      	ldr	r3, [pc, #288]	; (8001bb4 <HAL_ADC_PollForConversion+0x1fc>)
 8001a92:	400b      	ands	r3, r1
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d111      	bne.n	8001abc <HAL_ADC_PollForConversion+0x104>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	6919      	ldr	r1, [r3, #16]
 8001a9e:	4b46      	ldr	r3, [pc, #280]	; (8001bb8 <HAL_ADC_PollForConversion+0x200>)
 8001aa0:	400b      	ands	r3, r1
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d108      	bne.n	8001ab8 <HAL_ADC_PollForConversion+0x100>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	68d9      	ldr	r1, [r3, #12]
 8001aac:	4b43      	ldr	r3, [pc, #268]	; (8001bbc <HAL_ADC_PollForConversion+0x204>)
 8001aae:	400b      	ands	r3, r1
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d101      	bne.n	8001ab8 <HAL_ADC_PollForConversion+0x100>
 8001ab4:	2314      	movs	r3, #20
 8001ab6:	e020      	b.n	8001afa <HAL_ADC_PollForConversion+0x142>
 8001ab8:	2329      	movs	r3, #41	; 0x29
 8001aba:	e01e      	b.n	8001afa <HAL_ADC_PollForConversion+0x142>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	6919      	ldr	r1, [r3, #16]
 8001ac2:	4b3d      	ldr	r3, [pc, #244]	; (8001bb8 <HAL_ADC_PollForConversion+0x200>)
 8001ac4:	400b      	ands	r3, r1
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d106      	bne.n	8001ad8 <HAL_ADC_PollForConversion+0x120>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	68d9      	ldr	r1, [r3, #12]
 8001ad0:	4b3a      	ldr	r3, [pc, #232]	; (8001bbc <HAL_ADC_PollForConversion+0x204>)
 8001ad2:	400b      	ands	r3, r1
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d00d      	beq.n	8001af4 <HAL_ADC_PollForConversion+0x13c>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	6919      	ldr	r1, [r3, #16]
 8001ade:	4b38      	ldr	r3, [pc, #224]	; (8001bc0 <HAL_ADC_PollForConversion+0x208>)
 8001ae0:	400b      	ands	r3, r1
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d108      	bne.n	8001af8 <HAL_ADC_PollForConversion+0x140>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	68d9      	ldr	r1, [r3, #12]
 8001aec:	4b34      	ldr	r3, [pc, #208]	; (8001bc0 <HAL_ADC_PollForConversion+0x208>)
 8001aee:	400b      	ands	r3, r1
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d101      	bne.n	8001af8 <HAL_ADC_PollForConversion+0x140>
 8001af4:	2354      	movs	r3, #84	; 0x54
 8001af6:	e000      	b.n	8001afa <HAL_ADC_PollForConversion+0x142>
 8001af8:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001afa:	fb02 f303 	mul.w	r3, r2, r3
 8001afe:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001b00:	e021      	b.n	8001b46 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b08:	d01a      	beq.n	8001b40 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d007      	beq.n	8001b20 <HAL_ADC_PollForConversion+0x168>
 8001b10:	f7ff fd72 	bl	80015f8 <HAL_GetTick>
 8001b14:	4602      	mov	r2, r0
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	683a      	ldr	r2, [r7, #0]
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d20f      	bcs.n	8001b40 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	693a      	ldr	r2, [r7, #16]
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d90b      	bls.n	8001b40 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b2c:	f043 0204 	orr.w	r2, r3, #4
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2200      	movs	r2, #0
 8001b38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	e030      	b.n	8001ba2 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	3301      	adds	r3, #1
 8001b44:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	693a      	ldr	r2, [r7, #16]
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	d8d9      	bhi.n	8001b02 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f06f 0212 	mvn.w	r2, #18
 8001b56:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b5c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001b6e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001b72:	d115      	bne.n	8001ba0 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d111      	bne.n	8001ba0 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b80:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b8c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d105      	bne.n	8001ba0 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b98:	f043 0201 	orr.w	r2, r3, #1
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001ba0:	2300      	movs	r3, #0
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	371c      	adds	r7, #28
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd90      	pop	{r4, r7, pc}
 8001baa:	bf00      	nop
 8001bac:	20000000 	.word	0x20000000
 8001bb0:	24924924 	.word	0x24924924
 8001bb4:	00924924 	.word	0x00924924
 8001bb8:	12492492 	.word	0x12492492
 8001bbc:	00492492 	.word	0x00492492
 8001bc0:	00249249 	.word	0x00249249

08001bc4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	370c      	adds	r7, #12
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bc80      	pop	{r7}
 8001bda:	4770      	bx	lr

08001bdc <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001bdc:	b480      	push	{r7}
 8001bde:	b085      	sub	sp, #20
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001be6:	2300      	movs	r3, #0
 8001be8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001bea:	2300      	movs	r3, #0
 8001bec:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d101      	bne.n	8001bfc <HAL_ADC_ConfigChannel+0x20>
 8001bf8:	2302      	movs	r3, #2
 8001bfa:	e0dc      	b.n	8001db6 <HAL_ADC_ConfigChannel+0x1da>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2201      	movs	r2, #1
 8001c00:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	2b06      	cmp	r3, #6
 8001c0a:	d81c      	bhi.n	8001c46 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	685a      	ldr	r2, [r3, #4]
 8001c16:	4613      	mov	r3, r2
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	4413      	add	r3, r2
 8001c1c:	3b05      	subs	r3, #5
 8001c1e:	221f      	movs	r2, #31
 8001c20:	fa02 f303 	lsl.w	r3, r2, r3
 8001c24:	43db      	mvns	r3, r3
 8001c26:	4019      	ands	r1, r3
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	6818      	ldr	r0, [r3, #0]
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	685a      	ldr	r2, [r3, #4]
 8001c30:	4613      	mov	r3, r2
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	4413      	add	r3, r2
 8001c36:	3b05      	subs	r3, #5
 8001c38:	fa00 f203 	lsl.w	r2, r0, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	430a      	orrs	r2, r1
 8001c42:	635a      	str	r2, [r3, #52]	; 0x34
 8001c44:	e03c      	b.n	8001cc0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	2b0c      	cmp	r3, #12
 8001c4c:	d81c      	bhi.n	8001c88 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	685a      	ldr	r2, [r3, #4]
 8001c58:	4613      	mov	r3, r2
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	4413      	add	r3, r2
 8001c5e:	3b23      	subs	r3, #35	; 0x23
 8001c60:	221f      	movs	r2, #31
 8001c62:	fa02 f303 	lsl.w	r3, r2, r3
 8001c66:	43db      	mvns	r3, r3
 8001c68:	4019      	ands	r1, r3
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	6818      	ldr	r0, [r3, #0]
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	685a      	ldr	r2, [r3, #4]
 8001c72:	4613      	mov	r3, r2
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	4413      	add	r3, r2
 8001c78:	3b23      	subs	r3, #35	; 0x23
 8001c7a:	fa00 f203 	lsl.w	r2, r0, r3
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	430a      	orrs	r2, r1
 8001c84:	631a      	str	r2, [r3, #48]	; 0x30
 8001c86:	e01b      	b.n	8001cc0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	685a      	ldr	r2, [r3, #4]
 8001c92:	4613      	mov	r3, r2
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	4413      	add	r3, r2
 8001c98:	3b41      	subs	r3, #65	; 0x41
 8001c9a:	221f      	movs	r2, #31
 8001c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca0:	43db      	mvns	r3, r3
 8001ca2:	4019      	ands	r1, r3
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	6818      	ldr	r0, [r3, #0]
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	685a      	ldr	r2, [r3, #4]
 8001cac:	4613      	mov	r3, r2
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	4413      	add	r3, r2
 8001cb2:	3b41      	subs	r3, #65	; 0x41
 8001cb4:	fa00 f203 	lsl.w	r2, r0, r3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	430a      	orrs	r2, r1
 8001cbe:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	2b09      	cmp	r3, #9
 8001cc6:	d91c      	bls.n	8001d02 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	68d9      	ldr	r1, [r3, #12]
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	4613      	mov	r3, r2
 8001cd4:	005b      	lsls	r3, r3, #1
 8001cd6:	4413      	add	r3, r2
 8001cd8:	3b1e      	subs	r3, #30
 8001cda:	2207      	movs	r2, #7
 8001cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce0:	43db      	mvns	r3, r3
 8001ce2:	4019      	ands	r1, r3
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	6898      	ldr	r0, [r3, #8]
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	4613      	mov	r3, r2
 8001cee:	005b      	lsls	r3, r3, #1
 8001cf0:	4413      	add	r3, r2
 8001cf2:	3b1e      	subs	r3, #30
 8001cf4:	fa00 f203 	lsl.w	r2, r0, r3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	430a      	orrs	r2, r1
 8001cfe:	60da      	str	r2, [r3, #12]
 8001d00:	e019      	b.n	8001d36 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	6919      	ldr	r1, [r3, #16]
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	005b      	lsls	r3, r3, #1
 8001d10:	4413      	add	r3, r2
 8001d12:	2207      	movs	r2, #7
 8001d14:	fa02 f303 	lsl.w	r3, r2, r3
 8001d18:	43db      	mvns	r3, r3
 8001d1a:	4019      	ands	r1, r3
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	6898      	ldr	r0, [r3, #8]
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	4613      	mov	r3, r2
 8001d26:	005b      	lsls	r3, r3, #1
 8001d28:	4413      	add	r3, r2
 8001d2a:	fa00 f203 	lsl.w	r2, r0, r3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	430a      	orrs	r2, r1
 8001d34:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	2b10      	cmp	r3, #16
 8001d3c:	d003      	beq.n	8001d46 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001d42:	2b11      	cmp	r3, #17
 8001d44:	d132      	bne.n	8001dac <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a1d      	ldr	r2, [pc, #116]	; (8001dc0 <HAL_ADC_ConfigChannel+0x1e4>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d125      	bne.n	8001d9c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d126      	bne.n	8001dac <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	689a      	ldr	r2, [r3, #8]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001d6c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	2b10      	cmp	r3, #16
 8001d74:	d11a      	bne.n	8001dac <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d76:	4b13      	ldr	r3, [pc, #76]	; (8001dc4 <HAL_ADC_ConfigChannel+0x1e8>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a13      	ldr	r2, [pc, #76]	; (8001dc8 <HAL_ADC_ConfigChannel+0x1ec>)
 8001d7c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d80:	0c9a      	lsrs	r2, r3, #18
 8001d82:	4613      	mov	r3, r2
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	4413      	add	r3, r2
 8001d88:	005b      	lsls	r3, r3, #1
 8001d8a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001d8c:	e002      	b.n	8001d94 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	3b01      	subs	r3, #1
 8001d92:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d1f9      	bne.n	8001d8e <HAL_ADC_ConfigChannel+0x1b2>
 8001d9a:	e007      	b.n	8001dac <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001da0:	f043 0220 	orr.w	r2, r3, #32
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2200      	movs	r2, #0
 8001db0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001db4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3714      	adds	r7, #20
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bc80      	pop	{r7}
 8001dbe:	4770      	bx	lr
 8001dc0:	40012400 	.word	0x40012400
 8001dc4:	20000000 	.word	0x20000000
 8001dc8:	431bde83 	.word	0x431bde83

08001dcc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b084      	sub	sp, #16
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	f003 0301 	and.w	r3, r3, #1
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d040      	beq.n	8001e6c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	689a      	ldr	r2, [r3, #8]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f042 0201 	orr.w	r2, r2, #1
 8001df8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001dfa:	4b1f      	ldr	r3, [pc, #124]	; (8001e78 <ADC_Enable+0xac>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a1f      	ldr	r2, [pc, #124]	; (8001e7c <ADC_Enable+0xb0>)
 8001e00:	fba2 2303 	umull	r2, r3, r2, r3
 8001e04:	0c9b      	lsrs	r3, r3, #18
 8001e06:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001e08:	e002      	b.n	8001e10 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	3b01      	subs	r3, #1
 8001e0e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d1f9      	bne.n	8001e0a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001e16:	f7ff fbef 	bl	80015f8 <HAL_GetTick>
 8001e1a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001e1c:	e01f      	b.n	8001e5e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001e1e:	f7ff fbeb 	bl	80015f8 <HAL_GetTick>
 8001e22:	4602      	mov	r2, r0
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	2b02      	cmp	r3, #2
 8001e2a:	d918      	bls.n	8001e5e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	f003 0301 	and.w	r3, r3, #1
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d011      	beq.n	8001e5e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e3e:	f043 0210 	orr.w	r2, r3, #16
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e4a:	f043 0201 	orr.w	r2, r3, #1
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2200      	movs	r2, #0
 8001e56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e007      	b.n	8001e6e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	f003 0301 	and.w	r3, r3, #1
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d1d8      	bne.n	8001e1e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001e6c:	2300      	movs	r3, #0
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3710      	adds	r7, #16
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	20000000 	.word	0x20000000
 8001e7c:	431bde83 	.word	0x431bde83

08001e80 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b084      	sub	sp, #16
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	f003 0301 	and.w	r3, r3, #1
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d12e      	bne.n	8001ef8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	689a      	ldr	r2, [r3, #8]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f022 0201 	bic.w	r2, r2, #1
 8001ea8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001eaa:	f7ff fba5 	bl	80015f8 <HAL_GetTick>
 8001eae:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001eb0:	e01b      	b.n	8001eea <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001eb2:	f7ff fba1 	bl	80015f8 <HAL_GetTick>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	1ad3      	subs	r3, r2, r3
 8001ebc:	2b02      	cmp	r3, #2
 8001ebe:	d914      	bls.n	8001eea <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	f003 0301 	and.w	r3, r3, #1
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d10d      	bne.n	8001eea <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ed2:	f043 0210 	orr.w	r2, r3, #16
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ede:	f043 0201 	orr.w	r2, r3, #1
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e007      	b.n	8001efa <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	f003 0301 	and.w	r3, r3, #1
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d0dc      	beq.n	8001eb2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001ef8:	2300      	movs	r3, #0
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3710      	adds	r7, #16
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
	...

08001f04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b085      	sub	sp, #20
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	f003 0307 	and.w	r3, r3, #7
 8001f12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f14:	4b0c      	ldr	r3, [pc, #48]	; (8001f48 <__NVIC_SetPriorityGrouping+0x44>)
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f1a:	68ba      	ldr	r2, [r7, #8]
 8001f1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f20:	4013      	ands	r3, r2
 8001f22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f36:	4a04      	ldr	r2, [pc, #16]	; (8001f48 <__NVIC_SetPriorityGrouping+0x44>)
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	60d3      	str	r3, [r2, #12]
}
 8001f3c:	bf00      	nop
 8001f3e:	3714      	adds	r7, #20
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bc80      	pop	{r7}
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	e000ed00 	.word	0xe000ed00

08001f4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f50:	4b04      	ldr	r3, [pc, #16]	; (8001f64 <__NVIC_GetPriorityGrouping+0x18>)
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	0a1b      	lsrs	r3, r3, #8
 8001f56:	f003 0307 	and.w	r3, r3, #7
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bc80      	pop	{r7}
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	e000ed00 	.word	0xe000ed00

08001f68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	4603      	mov	r3, r0
 8001f70:	6039      	str	r1, [r7, #0]
 8001f72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	db0a      	blt.n	8001f92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	b2da      	uxtb	r2, r3
 8001f80:	490c      	ldr	r1, [pc, #48]	; (8001fb4 <__NVIC_SetPriority+0x4c>)
 8001f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f86:	0112      	lsls	r2, r2, #4
 8001f88:	b2d2      	uxtb	r2, r2
 8001f8a:	440b      	add	r3, r1
 8001f8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f90:	e00a      	b.n	8001fa8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	b2da      	uxtb	r2, r3
 8001f96:	4908      	ldr	r1, [pc, #32]	; (8001fb8 <__NVIC_SetPriority+0x50>)
 8001f98:	79fb      	ldrb	r3, [r7, #7]
 8001f9a:	f003 030f 	and.w	r3, r3, #15
 8001f9e:	3b04      	subs	r3, #4
 8001fa0:	0112      	lsls	r2, r2, #4
 8001fa2:	b2d2      	uxtb	r2, r2
 8001fa4:	440b      	add	r3, r1
 8001fa6:	761a      	strb	r2, [r3, #24]
}
 8001fa8:	bf00      	nop
 8001faa:	370c      	adds	r7, #12
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bc80      	pop	{r7}
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	e000e100 	.word	0xe000e100
 8001fb8:	e000ed00 	.word	0xe000ed00

08001fbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b089      	sub	sp, #36	; 0x24
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	60f8      	str	r0, [r7, #12]
 8001fc4:	60b9      	str	r1, [r7, #8]
 8001fc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	f003 0307 	and.w	r3, r3, #7
 8001fce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	f1c3 0307 	rsb	r3, r3, #7
 8001fd6:	2b04      	cmp	r3, #4
 8001fd8:	bf28      	it	cs
 8001fda:	2304      	movcs	r3, #4
 8001fdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	3304      	adds	r3, #4
 8001fe2:	2b06      	cmp	r3, #6
 8001fe4:	d902      	bls.n	8001fec <NVIC_EncodePriority+0x30>
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	3b03      	subs	r3, #3
 8001fea:	e000      	b.n	8001fee <NVIC_EncodePriority+0x32>
 8001fec:	2300      	movs	r3, #0
 8001fee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ff0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ff4:	69bb      	ldr	r3, [r7, #24]
 8001ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffa:	43da      	mvns	r2, r3
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	401a      	ands	r2, r3
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002004:	f04f 31ff 	mov.w	r1, #4294967295
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	fa01 f303 	lsl.w	r3, r1, r3
 800200e:	43d9      	mvns	r1, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002014:	4313      	orrs	r3, r2
         );
}
 8002016:	4618      	mov	r0, r3
 8002018:	3724      	adds	r7, #36	; 0x24
 800201a:	46bd      	mov	sp, r7
 800201c:	bc80      	pop	{r7}
 800201e:	4770      	bx	lr

08002020 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	3b01      	subs	r3, #1
 800202c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002030:	d301      	bcc.n	8002036 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002032:	2301      	movs	r3, #1
 8002034:	e00f      	b.n	8002056 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002036:	4a0a      	ldr	r2, [pc, #40]	; (8002060 <SysTick_Config+0x40>)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	3b01      	subs	r3, #1
 800203c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800203e:	210f      	movs	r1, #15
 8002040:	f04f 30ff 	mov.w	r0, #4294967295
 8002044:	f7ff ff90 	bl	8001f68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002048:	4b05      	ldr	r3, [pc, #20]	; (8002060 <SysTick_Config+0x40>)
 800204a:	2200      	movs	r2, #0
 800204c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800204e:	4b04      	ldr	r3, [pc, #16]	; (8002060 <SysTick_Config+0x40>)
 8002050:	2207      	movs	r2, #7
 8002052:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002054:	2300      	movs	r3, #0
}
 8002056:	4618      	mov	r0, r3
 8002058:	3708      	adds	r7, #8
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	e000e010 	.word	0xe000e010

08002064 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	f7ff ff49 	bl	8001f04 <__NVIC_SetPriorityGrouping>
}
 8002072:	bf00      	nop
 8002074:	3708      	adds	r7, #8
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}

0800207a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800207a:	b580      	push	{r7, lr}
 800207c:	b086      	sub	sp, #24
 800207e:	af00      	add	r7, sp, #0
 8002080:	4603      	mov	r3, r0
 8002082:	60b9      	str	r1, [r7, #8]
 8002084:	607a      	str	r2, [r7, #4]
 8002086:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002088:	2300      	movs	r3, #0
 800208a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800208c:	f7ff ff5e 	bl	8001f4c <__NVIC_GetPriorityGrouping>
 8002090:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	68b9      	ldr	r1, [r7, #8]
 8002096:	6978      	ldr	r0, [r7, #20]
 8002098:	f7ff ff90 	bl	8001fbc <NVIC_EncodePriority>
 800209c:	4602      	mov	r2, r0
 800209e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020a2:	4611      	mov	r1, r2
 80020a4:	4618      	mov	r0, r3
 80020a6:	f7ff ff5f 	bl	8001f68 <__NVIC_SetPriority>
}
 80020aa:	bf00      	nop
 80020ac:	3718      	adds	r7, #24
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}

080020b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020b2:	b580      	push	{r7, lr}
 80020b4:	b082      	sub	sp, #8
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f7ff ffb0 	bl	8002020 <SysTick_Config>
 80020c0:	4603      	mov	r3, r0
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3708      	adds	r7, #8
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
	...

080020cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b08b      	sub	sp, #44	; 0x2c
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
 80020d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80020d6:	2300      	movs	r3, #0
 80020d8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80020da:	2300      	movs	r3, #0
 80020dc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020de:	e169      	b.n	80023b4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80020e0:	2201      	movs	r2, #1
 80020e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e4:	fa02 f303 	lsl.w	r3, r2, r3
 80020e8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	69fa      	ldr	r2, [r7, #28]
 80020f0:	4013      	ands	r3, r2
 80020f2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80020f4:	69ba      	ldr	r2, [r7, #24]
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	429a      	cmp	r2, r3
 80020fa:	f040 8158 	bne.w	80023ae <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	4a9a      	ldr	r2, [pc, #616]	; (800236c <HAL_GPIO_Init+0x2a0>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d05e      	beq.n	80021c6 <HAL_GPIO_Init+0xfa>
 8002108:	4a98      	ldr	r2, [pc, #608]	; (800236c <HAL_GPIO_Init+0x2a0>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d875      	bhi.n	80021fa <HAL_GPIO_Init+0x12e>
 800210e:	4a98      	ldr	r2, [pc, #608]	; (8002370 <HAL_GPIO_Init+0x2a4>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d058      	beq.n	80021c6 <HAL_GPIO_Init+0xfa>
 8002114:	4a96      	ldr	r2, [pc, #600]	; (8002370 <HAL_GPIO_Init+0x2a4>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d86f      	bhi.n	80021fa <HAL_GPIO_Init+0x12e>
 800211a:	4a96      	ldr	r2, [pc, #600]	; (8002374 <HAL_GPIO_Init+0x2a8>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d052      	beq.n	80021c6 <HAL_GPIO_Init+0xfa>
 8002120:	4a94      	ldr	r2, [pc, #592]	; (8002374 <HAL_GPIO_Init+0x2a8>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d869      	bhi.n	80021fa <HAL_GPIO_Init+0x12e>
 8002126:	4a94      	ldr	r2, [pc, #592]	; (8002378 <HAL_GPIO_Init+0x2ac>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d04c      	beq.n	80021c6 <HAL_GPIO_Init+0xfa>
 800212c:	4a92      	ldr	r2, [pc, #584]	; (8002378 <HAL_GPIO_Init+0x2ac>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d863      	bhi.n	80021fa <HAL_GPIO_Init+0x12e>
 8002132:	4a92      	ldr	r2, [pc, #584]	; (800237c <HAL_GPIO_Init+0x2b0>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d046      	beq.n	80021c6 <HAL_GPIO_Init+0xfa>
 8002138:	4a90      	ldr	r2, [pc, #576]	; (800237c <HAL_GPIO_Init+0x2b0>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d85d      	bhi.n	80021fa <HAL_GPIO_Init+0x12e>
 800213e:	2b12      	cmp	r3, #18
 8002140:	d82a      	bhi.n	8002198 <HAL_GPIO_Init+0xcc>
 8002142:	2b12      	cmp	r3, #18
 8002144:	d859      	bhi.n	80021fa <HAL_GPIO_Init+0x12e>
 8002146:	a201      	add	r2, pc, #4	; (adr r2, 800214c <HAL_GPIO_Init+0x80>)
 8002148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800214c:	080021c7 	.word	0x080021c7
 8002150:	080021a1 	.word	0x080021a1
 8002154:	080021b3 	.word	0x080021b3
 8002158:	080021f5 	.word	0x080021f5
 800215c:	080021fb 	.word	0x080021fb
 8002160:	080021fb 	.word	0x080021fb
 8002164:	080021fb 	.word	0x080021fb
 8002168:	080021fb 	.word	0x080021fb
 800216c:	080021fb 	.word	0x080021fb
 8002170:	080021fb 	.word	0x080021fb
 8002174:	080021fb 	.word	0x080021fb
 8002178:	080021fb 	.word	0x080021fb
 800217c:	080021fb 	.word	0x080021fb
 8002180:	080021fb 	.word	0x080021fb
 8002184:	080021fb 	.word	0x080021fb
 8002188:	080021fb 	.word	0x080021fb
 800218c:	080021fb 	.word	0x080021fb
 8002190:	080021a9 	.word	0x080021a9
 8002194:	080021bd 	.word	0x080021bd
 8002198:	4a79      	ldr	r2, [pc, #484]	; (8002380 <HAL_GPIO_Init+0x2b4>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d013      	beq.n	80021c6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800219e:	e02c      	b.n	80021fa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	623b      	str	r3, [r7, #32]
          break;
 80021a6:	e029      	b.n	80021fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	3304      	adds	r3, #4
 80021ae:	623b      	str	r3, [r7, #32]
          break;
 80021b0:	e024      	b.n	80021fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	68db      	ldr	r3, [r3, #12]
 80021b6:	3308      	adds	r3, #8
 80021b8:	623b      	str	r3, [r7, #32]
          break;
 80021ba:	e01f      	b.n	80021fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	330c      	adds	r3, #12
 80021c2:	623b      	str	r3, [r7, #32]
          break;
 80021c4:	e01a      	b.n	80021fc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d102      	bne.n	80021d4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80021ce:	2304      	movs	r3, #4
 80021d0:	623b      	str	r3, [r7, #32]
          break;
 80021d2:	e013      	b.n	80021fc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d105      	bne.n	80021e8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80021dc:	2308      	movs	r3, #8
 80021de:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	69fa      	ldr	r2, [r7, #28]
 80021e4:	611a      	str	r2, [r3, #16]
          break;
 80021e6:	e009      	b.n	80021fc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80021e8:	2308      	movs	r3, #8
 80021ea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	69fa      	ldr	r2, [r7, #28]
 80021f0:	615a      	str	r2, [r3, #20]
          break;
 80021f2:	e003      	b.n	80021fc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80021f4:	2300      	movs	r3, #0
 80021f6:	623b      	str	r3, [r7, #32]
          break;
 80021f8:	e000      	b.n	80021fc <HAL_GPIO_Init+0x130>
          break;
 80021fa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80021fc:	69bb      	ldr	r3, [r7, #24]
 80021fe:	2bff      	cmp	r3, #255	; 0xff
 8002200:	d801      	bhi.n	8002206 <HAL_GPIO_Init+0x13a>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	e001      	b.n	800220a <HAL_GPIO_Init+0x13e>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	3304      	adds	r3, #4
 800220a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800220c:	69bb      	ldr	r3, [r7, #24]
 800220e:	2bff      	cmp	r3, #255	; 0xff
 8002210:	d802      	bhi.n	8002218 <HAL_GPIO_Init+0x14c>
 8002212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	e002      	b.n	800221e <HAL_GPIO_Init+0x152>
 8002218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800221a:	3b08      	subs	r3, #8
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	210f      	movs	r1, #15
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	fa01 f303 	lsl.w	r3, r1, r3
 800222c:	43db      	mvns	r3, r3
 800222e:	401a      	ands	r2, r3
 8002230:	6a39      	ldr	r1, [r7, #32]
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	fa01 f303 	lsl.w	r3, r1, r3
 8002238:	431a      	orrs	r2, r3
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002246:	2b00      	cmp	r3, #0
 8002248:	f000 80b1 	beq.w	80023ae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800224c:	4b4d      	ldr	r3, [pc, #308]	; (8002384 <HAL_GPIO_Init+0x2b8>)
 800224e:	699b      	ldr	r3, [r3, #24]
 8002250:	4a4c      	ldr	r2, [pc, #304]	; (8002384 <HAL_GPIO_Init+0x2b8>)
 8002252:	f043 0301 	orr.w	r3, r3, #1
 8002256:	6193      	str	r3, [r2, #24]
 8002258:	4b4a      	ldr	r3, [pc, #296]	; (8002384 <HAL_GPIO_Init+0x2b8>)
 800225a:	699b      	ldr	r3, [r3, #24]
 800225c:	f003 0301 	and.w	r3, r3, #1
 8002260:	60bb      	str	r3, [r7, #8]
 8002262:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002264:	4a48      	ldr	r2, [pc, #288]	; (8002388 <HAL_GPIO_Init+0x2bc>)
 8002266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002268:	089b      	lsrs	r3, r3, #2
 800226a:	3302      	adds	r3, #2
 800226c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002270:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002274:	f003 0303 	and.w	r3, r3, #3
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	220f      	movs	r2, #15
 800227c:	fa02 f303 	lsl.w	r3, r2, r3
 8002280:	43db      	mvns	r3, r3
 8002282:	68fa      	ldr	r2, [r7, #12]
 8002284:	4013      	ands	r3, r2
 8002286:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	4a40      	ldr	r2, [pc, #256]	; (800238c <HAL_GPIO_Init+0x2c0>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d013      	beq.n	80022b8 <HAL_GPIO_Init+0x1ec>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	4a3f      	ldr	r2, [pc, #252]	; (8002390 <HAL_GPIO_Init+0x2c4>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d00d      	beq.n	80022b4 <HAL_GPIO_Init+0x1e8>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	4a3e      	ldr	r2, [pc, #248]	; (8002394 <HAL_GPIO_Init+0x2c8>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d007      	beq.n	80022b0 <HAL_GPIO_Init+0x1e4>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	4a3d      	ldr	r2, [pc, #244]	; (8002398 <HAL_GPIO_Init+0x2cc>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d101      	bne.n	80022ac <HAL_GPIO_Init+0x1e0>
 80022a8:	2303      	movs	r3, #3
 80022aa:	e006      	b.n	80022ba <HAL_GPIO_Init+0x1ee>
 80022ac:	2304      	movs	r3, #4
 80022ae:	e004      	b.n	80022ba <HAL_GPIO_Init+0x1ee>
 80022b0:	2302      	movs	r3, #2
 80022b2:	e002      	b.n	80022ba <HAL_GPIO_Init+0x1ee>
 80022b4:	2301      	movs	r3, #1
 80022b6:	e000      	b.n	80022ba <HAL_GPIO_Init+0x1ee>
 80022b8:	2300      	movs	r3, #0
 80022ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022bc:	f002 0203 	and.w	r2, r2, #3
 80022c0:	0092      	lsls	r2, r2, #2
 80022c2:	4093      	lsls	r3, r2
 80022c4:	68fa      	ldr	r2, [r7, #12]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80022ca:	492f      	ldr	r1, [pc, #188]	; (8002388 <HAL_GPIO_Init+0x2bc>)
 80022cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ce:	089b      	lsrs	r3, r3, #2
 80022d0:	3302      	adds	r3, #2
 80022d2:	68fa      	ldr	r2, [r7, #12]
 80022d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d006      	beq.n	80022f2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80022e4:	4b2d      	ldr	r3, [pc, #180]	; (800239c <HAL_GPIO_Init+0x2d0>)
 80022e6:	689a      	ldr	r2, [r3, #8]
 80022e8:	492c      	ldr	r1, [pc, #176]	; (800239c <HAL_GPIO_Init+0x2d0>)
 80022ea:	69bb      	ldr	r3, [r7, #24]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	608b      	str	r3, [r1, #8]
 80022f0:	e006      	b.n	8002300 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80022f2:	4b2a      	ldr	r3, [pc, #168]	; (800239c <HAL_GPIO_Init+0x2d0>)
 80022f4:	689a      	ldr	r2, [r3, #8]
 80022f6:	69bb      	ldr	r3, [r7, #24]
 80022f8:	43db      	mvns	r3, r3
 80022fa:	4928      	ldr	r1, [pc, #160]	; (800239c <HAL_GPIO_Init+0x2d0>)
 80022fc:	4013      	ands	r3, r2
 80022fe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002308:	2b00      	cmp	r3, #0
 800230a:	d006      	beq.n	800231a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800230c:	4b23      	ldr	r3, [pc, #140]	; (800239c <HAL_GPIO_Init+0x2d0>)
 800230e:	68da      	ldr	r2, [r3, #12]
 8002310:	4922      	ldr	r1, [pc, #136]	; (800239c <HAL_GPIO_Init+0x2d0>)
 8002312:	69bb      	ldr	r3, [r7, #24]
 8002314:	4313      	orrs	r3, r2
 8002316:	60cb      	str	r3, [r1, #12]
 8002318:	e006      	b.n	8002328 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800231a:	4b20      	ldr	r3, [pc, #128]	; (800239c <HAL_GPIO_Init+0x2d0>)
 800231c:	68da      	ldr	r2, [r3, #12]
 800231e:	69bb      	ldr	r3, [r7, #24]
 8002320:	43db      	mvns	r3, r3
 8002322:	491e      	ldr	r1, [pc, #120]	; (800239c <HAL_GPIO_Init+0x2d0>)
 8002324:	4013      	ands	r3, r2
 8002326:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d006      	beq.n	8002342 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002334:	4b19      	ldr	r3, [pc, #100]	; (800239c <HAL_GPIO_Init+0x2d0>)
 8002336:	685a      	ldr	r2, [r3, #4]
 8002338:	4918      	ldr	r1, [pc, #96]	; (800239c <HAL_GPIO_Init+0x2d0>)
 800233a:	69bb      	ldr	r3, [r7, #24]
 800233c:	4313      	orrs	r3, r2
 800233e:	604b      	str	r3, [r1, #4]
 8002340:	e006      	b.n	8002350 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002342:	4b16      	ldr	r3, [pc, #88]	; (800239c <HAL_GPIO_Init+0x2d0>)
 8002344:	685a      	ldr	r2, [r3, #4]
 8002346:	69bb      	ldr	r3, [r7, #24]
 8002348:	43db      	mvns	r3, r3
 800234a:	4914      	ldr	r1, [pc, #80]	; (800239c <HAL_GPIO_Init+0x2d0>)
 800234c:	4013      	ands	r3, r2
 800234e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002358:	2b00      	cmp	r3, #0
 800235a:	d021      	beq.n	80023a0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800235c:	4b0f      	ldr	r3, [pc, #60]	; (800239c <HAL_GPIO_Init+0x2d0>)
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	490e      	ldr	r1, [pc, #56]	; (800239c <HAL_GPIO_Init+0x2d0>)
 8002362:	69bb      	ldr	r3, [r7, #24]
 8002364:	4313      	orrs	r3, r2
 8002366:	600b      	str	r3, [r1, #0]
 8002368:	e021      	b.n	80023ae <HAL_GPIO_Init+0x2e2>
 800236a:	bf00      	nop
 800236c:	10320000 	.word	0x10320000
 8002370:	10310000 	.word	0x10310000
 8002374:	10220000 	.word	0x10220000
 8002378:	10210000 	.word	0x10210000
 800237c:	10120000 	.word	0x10120000
 8002380:	10110000 	.word	0x10110000
 8002384:	40021000 	.word	0x40021000
 8002388:	40010000 	.word	0x40010000
 800238c:	40010800 	.word	0x40010800
 8002390:	40010c00 	.word	0x40010c00
 8002394:	40011000 	.word	0x40011000
 8002398:	40011400 	.word	0x40011400
 800239c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80023a0:	4b0b      	ldr	r3, [pc, #44]	; (80023d0 <HAL_GPIO_Init+0x304>)
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	69bb      	ldr	r3, [r7, #24]
 80023a6:	43db      	mvns	r3, r3
 80023a8:	4909      	ldr	r1, [pc, #36]	; (80023d0 <HAL_GPIO_Init+0x304>)
 80023aa:	4013      	ands	r3, r2
 80023ac:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80023ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b0:	3301      	adds	r3, #1
 80023b2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ba:	fa22 f303 	lsr.w	r3, r2, r3
 80023be:	2b00      	cmp	r3, #0
 80023c0:	f47f ae8e 	bne.w	80020e0 <HAL_GPIO_Init+0x14>
  }
}
 80023c4:	bf00      	nop
 80023c6:	bf00      	nop
 80023c8:	372c      	adds	r7, #44	; 0x2c
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bc80      	pop	{r7}
 80023ce:	4770      	bx	lr
 80023d0:	40010400 	.word	0x40010400

080023d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	460b      	mov	r3, r1
 80023de:	807b      	strh	r3, [r7, #2]
 80023e0:	4613      	mov	r3, r2
 80023e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80023e4:	787b      	ldrb	r3, [r7, #1]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d003      	beq.n	80023f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023ea:	887a      	ldrh	r2, [r7, #2]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80023f0:	e003      	b.n	80023fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80023f2:	887b      	ldrh	r3, [r7, #2]
 80023f4:	041a      	lsls	r2, r3, #16
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	611a      	str	r2, [r3, #16]
}
 80023fa:	bf00      	nop
 80023fc:	370c      	adds	r7, #12
 80023fe:	46bd      	mov	sp, r7
 8002400:	bc80      	pop	{r7}
 8002402:	4770      	bx	lr

08002404 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b086      	sub	sp, #24
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d101      	bne.n	8002416 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e272      	b.n	80028fc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 0301 	and.w	r3, r3, #1
 800241e:	2b00      	cmp	r3, #0
 8002420:	f000 8087 	beq.w	8002532 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002424:	4b92      	ldr	r3, [pc, #584]	; (8002670 <HAL_RCC_OscConfig+0x26c>)
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f003 030c 	and.w	r3, r3, #12
 800242c:	2b04      	cmp	r3, #4
 800242e:	d00c      	beq.n	800244a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002430:	4b8f      	ldr	r3, [pc, #572]	; (8002670 <HAL_RCC_OscConfig+0x26c>)
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f003 030c 	and.w	r3, r3, #12
 8002438:	2b08      	cmp	r3, #8
 800243a:	d112      	bne.n	8002462 <HAL_RCC_OscConfig+0x5e>
 800243c:	4b8c      	ldr	r3, [pc, #560]	; (8002670 <HAL_RCC_OscConfig+0x26c>)
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002444:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002448:	d10b      	bne.n	8002462 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800244a:	4b89      	ldr	r3, [pc, #548]	; (8002670 <HAL_RCC_OscConfig+0x26c>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d06c      	beq.n	8002530 <HAL_RCC_OscConfig+0x12c>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d168      	bne.n	8002530 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e24c      	b.n	80028fc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800246a:	d106      	bne.n	800247a <HAL_RCC_OscConfig+0x76>
 800246c:	4b80      	ldr	r3, [pc, #512]	; (8002670 <HAL_RCC_OscConfig+0x26c>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a7f      	ldr	r2, [pc, #508]	; (8002670 <HAL_RCC_OscConfig+0x26c>)
 8002472:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002476:	6013      	str	r3, [r2, #0]
 8002478:	e02e      	b.n	80024d8 <HAL_RCC_OscConfig+0xd4>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d10c      	bne.n	800249c <HAL_RCC_OscConfig+0x98>
 8002482:	4b7b      	ldr	r3, [pc, #492]	; (8002670 <HAL_RCC_OscConfig+0x26c>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a7a      	ldr	r2, [pc, #488]	; (8002670 <HAL_RCC_OscConfig+0x26c>)
 8002488:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800248c:	6013      	str	r3, [r2, #0]
 800248e:	4b78      	ldr	r3, [pc, #480]	; (8002670 <HAL_RCC_OscConfig+0x26c>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a77      	ldr	r2, [pc, #476]	; (8002670 <HAL_RCC_OscConfig+0x26c>)
 8002494:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002498:	6013      	str	r3, [r2, #0]
 800249a:	e01d      	b.n	80024d8 <HAL_RCC_OscConfig+0xd4>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024a4:	d10c      	bne.n	80024c0 <HAL_RCC_OscConfig+0xbc>
 80024a6:	4b72      	ldr	r3, [pc, #456]	; (8002670 <HAL_RCC_OscConfig+0x26c>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a71      	ldr	r2, [pc, #452]	; (8002670 <HAL_RCC_OscConfig+0x26c>)
 80024ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024b0:	6013      	str	r3, [r2, #0]
 80024b2:	4b6f      	ldr	r3, [pc, #444]	; (8002670 <HAL_RCC_OscConfig+0x26c>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a6e      	ldr	r2, [pc, #440]	; (8002670 <HAL_RCC_OscConfig+0x26c>)
 80024b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024bc:	6013      	str	r3, [r2, #0]
 80024be:	e00b      	b.n	80024d8 <HAL_RCC_OscConfig+0xd4>
 80024c0:	4b6b      	ldr	r3, [pc, #428]	; (8002670 <HAL_RCC_OscConfig+0x26c>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a6a      	ldr	r2, [pc, #424]	; (8002670 <HAL_RCC_OscConfig+0x26c>)
 80024c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024ca:	6013      	str	r3, [r2, #0]
 80024cc:	4b68      	ldr	r3, [pc, #416]	; (8002670 <HAL_RCC_OscConfig+0x26c>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a67      	ldr	r2, [pc, #412]	; (8002670 <HAL_RCC_OscConfig+0x26c>)
 80024d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024d6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d013      	beq.n	8002508 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024e0:	f7ff f88a 	bl	80015f8 <HAL_GetTick>
 80024e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024e6:	e008      	b.n	80024fa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024e8:	f7ff f886 	bl	80015f8 <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	2b64      	cmp	r3, #100	; 0x64
 80024f4:	d901      	bls.n	80024fa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e200      	b.n	80028fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024fa:	4b5d      	ldr	r3, [pc, #372]	; (8002670 <HAL_RCC_OscConfig+0x26c>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d0f0      	beq.n	80024e8 <HAL_RCC_OscConfig+0xe4>
 8002506:	e014      	b.n	8002532 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002508:	f7ff f876 	bl	80015f8 <HAL_GetTick>
 800250c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800250e:	e008      	b.n	8002522 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002510:	f7ff f872 	bl	80015f8 <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	2b64      	cmp	r3, #100	; 0x64
 800251c:	d901      	bls.n	8002522 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800251e:	2303      	movs	r3, #3
 8002520:	e1ec      	b.n	80028fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002522:	4b53      	ldr	r3, [pc, #332]	; (8002670 <HAL_RCC_OscConfig+0x26c>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d1f0      	bne.n	8002510 <HAL_RCC_OscConfig+0x10c>
 800252e:	e000      	b.n	8002532 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002530:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0302 	and.w	r3, r3, #2
 800253a:	2b00      	cmp	r3, #0
 800253c:	d063      	beq.n	8002606 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800253e:	4b4c      	ldr	r3, [pc, #304]	; (8002670 <HAL_RCC_OscConfig+0x26c>)
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	f003 030c 	and.w	r3, r3, #12
 8002546:	2b00      	cmp	r3, #0
 8002548:	d00b      	beq.n	8002562 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800254a:	4b49      	ldr	r3, [pc, #292]	; (8002670 <HAL_RCC_OscConfig+0x26c>)
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	f003 030c 	and.w	r3, r3, #12
 8002552:	2b08      	cmp	r3, #8
 8002554:	d11c      	bne.n	8002590 <HAL_RCC_OscConfig+0x18c>
 8002556:	4b46      	ldr	r3, [pc, #280]	; (8002670 <HAL_RCC_OscConfig+0x26c>)
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d116      	bne.n	8002590 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002562:	4b43      	ldr	r3, [pc, #268]	; (8002670 <HAL_RCC_OscConfig+0x26c>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 0302 	and.w	r3, r3, #2
 800256a:	2b00      	cmp	r3, #0
 800256c:	d005      	beq.n	800257a <HAL_RCC_OscConfig+0x176>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	691b      	ldr	r3, [r3, #16]
 8002572:	2b01      	cmp	r3, #1
 8002574:	d001      	beq.n	800257a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e1c0      	b.n	80028fc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800257a:	4b3d      	ldr	r3, [pc, #244]	; (8002670 <HAL_RCC_OscConfig+0x26c>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	695b      	ldr	r3, [r3, #20]
 8002586:	00db      	lsls	r3, r3, #3
 8002588:	4939      	ldr	r1, [pc, #228]	; (8002670 <HAL_RCC_OscConfig+0x26c>)
 800258a:	4313      	orrs	r3, r2
 800258c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800258e:	e03a      	b.n	8002606 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	691b      	ldr	r3, [r3, #16]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d020      	beq.n	80025da <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002598:	4b36      	ldr	r3, [pc, #216]	; (8002674 <HAL_RCC_OscConfig+0x270>)
 800259a:	2201      	movs	r2, #1
 800259c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800259e:	f7ff f82b 	bl	80015f8 <HAL_GetTick>
 80025a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025a4:	e008      	b.n	80025b8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025a6:	f7ff f827 	bl	80015f8 <HAL_GetTick>
 80025aa:	4602      	mov	r2, r0
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	1ad3      	subs	r3, r2, r3
 80025b0:	2b02      	cmp	r3, #2
 80025b2:	d901      	bls.n	80025b8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80025b4:	2303      	movs	r3, #3
 80025b6:	e1a1      	b.n	80028fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025b8:	4b2d      	ldr	r3, [pc, #180]	; (8002670 <HAL_RCC_OscConfig+0x26c>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0302 	and.w	r3, r3, #2
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d0f0      	beq.n	80025a6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025c4:	4b2a      	ldr	r3, [pc, #168]	; (8002670 <HAL_RCC_OscConfig+0x26c>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	695b      	ldr	r3, [r3, #20]
 80025d0:	00db      	lsls	r3, r3, #3
 80025d2:	4927      	ldr	r1, [pc, #156]	; (8002670 <HAL_RCC_OscConfig+0x26c>)
 80025d4:	4313      	orrs	r3, r2
 80025d6:	600b      	str	r3, [r1, #0]
 80025d8:	e015      	b.n	8002606 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025da:	4b26      	ldr	r3, [pc, #152]	; (8002674 <HAL_RCC_OscConfig+0x270>)
 80025dc:	2200      	movs	r2, #0
 80025de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025e0:	f7ff f80a 	bl	80015f8 <HAL_GetTick>
 80025e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025e6:	e008      	b.n	80025fa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025e8:	f7ff f806 	bl	80015f8 <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	d901      	bls.n	80025fa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80025f6:	2303      	movs	r3, #3
 80025f8:	e180      	b.n	80028fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025fa:	4b1d      	ldr	r3, [pc, #116]	; (8002670 <HAL_RCC_OscConfig+0x26c>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0302 	and.w	r3, r3, #2
 8002602:	2b00      	cmp	r3, #0
 8002604:	d1f0      	bne.n	80025e8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0308 	and.w	r3, r3, #8
 800260e:	2b00      	cmp	r3, #0
 8002610:	d03a      	beq.n	8002688 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	699b      	ldr	r3, [r3, #24]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d019      	beq.n	800264e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800261a:	4b17      	ldr	r3, [pc, #92]	; (8002678 <HAL_RCC_OscConfig+0x274>)
 800261c:	2201      	movs	r2, #1
 800261e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002620:	f7fe ffea 	bl	80015f8 <HAL_GetTick>
 8002624:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002626:	e008      	b.n	800263a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002628:	f7fe ffe6 	bl	80015f8 <HAL_GetTick>
 800262c:	4602      	mov	r2, r0
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	2b02      	cmp	r3, #2
 8002634:	d901      	bls.n	800263a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002636:	2303      	movs	r3, #3
 8002638:	e160      	b.n	80028fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800263a:	4b0d      	ldr	r3, [pc, #52]	; (8002670 <HAL_RCC_OscConfig+0x26c>)
 800263c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263e:	f003 0302 	and.w	r3, r3, #2
 8002642:	2b00      	cmp	r3, #0
 8002644:	d0f0      	beq.n	8002628 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002646:	2001      	movs	r0, #1
 8002648:	f000 face 	bl	8002be8 <RCC_Delay>
 800264c:	e01c      	b.n	8002688 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800264e:	4b0a      	ldr	r3, [pc, #40]	; (8002678 <HAL_RCC_OscConfig+0x274>)
 8002650:	2200      	movs	r2, #0
 8002652:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002654:	f7fe ffd0 	bl	80015f8 <HAL_GetTick>
 8002658:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800265a:	e00f      	b.n	800267c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800265c:	f7fe ffcc 	bl	80015f8 <HAL_GetTick>
 8002660:	4602      	mov	r2, r0
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	2b02      	cmp	r3, #2
 8002668:	d908      	bls.n	800267c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800266a:	2303      	movs	r3, #3
 800266c:	e146      	b.n	80028fc <HAL_RCC_OscConfig+0x4f8>
 800266e:	bf00      	nop
 8002670:	40021000 	.word	0x40021000
 8002674:	42420000 	.word	0x42420000
 8002678:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800267c:	4b92      	ldr	r3, [pc, #584]	; (80028c8 <HAL_RCC_OscConfig+0x4c4>)
 800267e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002680:	f003 0302 	and.w	r3, r3, #2
 8002684:	2b00      	cmp	r3, #0
 8002686:	d1e9      	bne.n	800265c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 0304 	and.w	r3, r3, #4
 8002690:	2b00      	cmp	r3, #0
 8002692:	f000 80a6 	beq.w	80027e2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002696:	2300      	movs	r3, #0
 8002698:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800269a:	4b8b      	ldr	r3, [pc, #556]	; (80028c8 <HAL_RCC_OscConfig+0x4c4>)
 800269c:	69db      	ldr	r3, [r3, #28]
 800269e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d10d      	bne.n	80026c2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026a6:	4b88      	ldr	r3, [pc, #544]	; (80028c8 <HAL_RCC_OscConfig+0x4c4>)
 80026a8:	69db      	ldr	r3, [r3, #28]
 80026aa:	4a87      	ldr	r2, [pc, #540]	; (80028c8 <HAL_RCC_OscConfig+0x4c4>)
 80026ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026b0:	61d3      	str	r3, [r2, #28]
 80026b2:	4b85      	ldr	r3, [pc, #532]	; (80028c8 <HAL_RCC_OscConfig+0x4c4>)
 80026b4:	69db      	ldr	r3, [r3, #28]
 80026b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ba:	60bb      	str	r3, [r7, #8]
 80026bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026be:	2301      	movs	r3, #1
 80026c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026c2:	4b82      	ldr	r3, [pc, #520]	; (80028cc <HAL_RCC_OscConfig+0x4c8>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d118      	bne.n	8002700 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026ce:	4b7f      	ldr	r3, [pc, #508]	; (80028cc <HAL_RCC_OscConfig+0x4c8>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a7e      	ldr	r2, [pc, #504]	; (80028cc <HAL_RCC_OscConfig+0x4c8>)
 80026d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026da:	f7fe ff8d 	bl	80015f8 <HAL_GetTick>
 80026de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026e0:	e008      	b.n	80026f4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026e2:	f7fe ff89 	bl	80015f8 <HAL_GetTick>
 80026e6:	4602      	mov	r2, r0
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	1ad3      	subs	r3, r2, r3
 80026ec:	2b64      	cmp	r3, #100	; 0x64
 80026ee:	d901      	bls.n	80026f4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80026f0:	2303      	movs	r3, #3
 80026f2:	e103      	b.n	80028fc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026f4:	4b75      	ldr	r3, [pc, #468]	; (80028cc <HAL_RCC_OscConfig+0x4c8>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d0f0      	beq.n	80026e2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	2b01      	cmp	r3, #1
 8002706:	d106      	bne.n	8002716 <HAL_RCC_OscConfig+0x312>
 8002708:	4b6f      	ldr	r3, [pc, #444]	; (80028c8 <HAL_RCC_OscConfig+0x4c4>)
 800270a:	6a1b      	ldr	r3, [r3, #32]
 800270c:	4a6e      	ldr	r2, [pc, #440]	; (80028c8 <HAL_RCC_OscConfig+0x4c4>)
 800270e:	f043 0301 	orr.w	r3, r3, #1
 8002712:	6213      	str	r3, [r2, #32]
 8002714:	e02d      	b.n	8002772 <HAL_RCC_OscConfig+0x36e>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	68db      	ldr	r3, [r3, #12]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d10c      	bne.n	8002738 <HAL_RCC_OscConfig+0x334>
 800271e:	4b6a      	ldr	r3, [pc, #424]	; (80028c8 <HAL_RCC_OscConfig+0x4c4>)
 8002720:	6a1b      	ldr	r3, [r3, #32]
 8002722:	4a69      	ldr	r2, [pc, #420]	; (80028c8 <HAL_RCC_OscConfig+0x4c4>)
 8002724:	f023 0301 	bic.w	r3, r3, #1
 8002728:	6213      	str	r3, [r2, #32]
 800272a:	4b67      	ldr	r3, [pc, #412]	; (80028c8 <HAL_RCC_OscConfig+0x4c4>)
 800272c:	6a1b      	ldr	r3, [r3, #32]
 800272e:	4a66      	ldr	r2, [pc, #408]	; (80028c8 <HAL_RCC_OscConfig+0x4c4>)
 8002730:	f023 0304 	bic.w	r3, r3, #4
 8002734:	6213      	str	r3, [r2, #32]
 8002736:	e01c      	b.n	8002772 <HAL_RCC_OscConfig+0x36e>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	2b05      	cmp	r3, #5
 800273e:	d10c      	bne.n	800275a <HAL_RCC_OscConfig+0x356>
 8002740:	4b61      	ldr	r3, [pc, #388]	; (80028c8 <HAL_RCC_OscConfig+0x4c4>)
 8002742:	6a1b      	ldr	r3, [r3, #32]
 8002744:	4a60      	ldr	r2, [pc, #384]	; (80028c8 <HAL_RCC_OscConfig+0x4c4>)
 8002746:	f043 0304 	orr.w	r3, r3, #4
 800274a:	6213      	str	r3, [r2, #32]
 800274c:	4b5e      	ldr	r3, [pc, #376]	; (80028c8 <HAL_RCC_OscConfig+0x4c4>)
 800274e:	6a1b      	ldr	r3, [r3, #32]
 8002750:	4a5d      	ldr	r2, [pc, #372]	; (80028c8 <HAL_RCC_OscConfig+0x4c4>)
 8002752:	f043 0301 	orr.w	r3, r3, #1
 8002756:	6213      	str	r3, [r2, #32]
 8002758:	e00b      	b.n	8002772 <HAL_RCC_OscConfig+0x36e>
 800275a:	4b5b      	ldr	r3, [pc, #364]	; (80028c8 <HAL_RCC_OscConfig+0x4c4>)
 800275c:	6a1b      	ldr	r3, [r3, #32]
 800275e:	4a5a      	ldr	r2, [pc, #360]	; (80028c8 <HAL_RCC_OscConfig+0x4c4>)
 8002760:	f023 0301 	bic.w	r3, r3, #1
 8002764:	6213      	str	r3, [r2, #32]
 8002766:	4b58      	ldr	r3, [pc, #352]	; (80028c8 <HAL_RCC_OscConfig+0x4c4>)
 8002768:	6a1b      	ldr	r3, [r3, #32]
 800276a:	4a57      	ldr	r2, [pc, #348]	; (80028c8 <HAL_RCC_OscConfig+0x4c4>)
 800276c:	f023 0304 	bic.w	r3, r3, #4
 8002770:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	68db      	ldr	r3, [r3, #12]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d015      	beq.n	80027a6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800277a:	f7fe ff3d 	bl	80015f8 <HAL_GetTick>
 800277e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002780:	e00a      	b.n	8002798 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002782:	f7fe ff39 	bl	80015f8 <HAL_GetTick>
 8002786:	4602      	mov	r2, r0
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	1ad3      	subs	r3, r2, r3
 800278c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002790:	4293      	cmp	r3, r2
 8002792:	d901      	bls.n	8002798 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002794:	2303      	movs	r3, #3
 8002796:	e0b1      	b.n	80028fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002798:	4b4b      	ldr	r3, [pc, #300]	; (80028c8 <HAL_RCC_OscConfig+0x4c4>)
 800279a:	6a1b      	ldr	r3, [r3, #32]
 800279c:	f003 0302 	and.w	r3, r3, #2
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d0ee      	beq.n	8002782 <HAL_RCC_OscConfig+0x37e>
 80027a4:	e014      	b.n	80027d0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027a6:	f7fe ff27 	bl	80015f8 <HAL_GetTick>
 80027aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027ac:	e00a      	b.n	80027c4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027ae:	f7fe ff23 	bl	80015f8 <HAL_GetTick>
 80027b2:	4602      	mov	r2, r0
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	1ad3      	subs	r3, r2, r3
 80027b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80027bc:	4293      	cmp	r3, r2
 80027be:	d901      	bls.n	80027c4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80027c0:	2303      	movs	r3, #3
 80027c2:	e09b      	b.n	80028fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027c4:	4b40      	ldr	r3, [pc, #256]	; (80028c8 <HAL_RCC_OscConfig+0x4c4>)
 80027c6:	6a1b      	ldr	r3, [r3, #32]
 80027c8:	f003 0302 	and.w	r3, r3, #2
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d1ee      	bne.n	80027ae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80027d0:	7dfb      	ldrb	r3, [r7, #23]
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d105      	bne.n	80027e2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027d6:	4b3c      	ldr	r3, [pc, #240]	; (80028c8 <HAL_RCC_OscConfig+0x4c4>)
 80027d8:	69db      	ldr	r3, [r3, #28]
 80027da:	4a3b      	ldr	r2, [pc, #236]	; (80028c8 <HAL_RCC_OscConfig+0x4c4>)
 80027dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027e0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	69db      	ldr	r3, [r3, #28]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	f000 8087 	beq.w	80028fa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027ec:	4b36      	ldr	r3, [pc, #216]	; (80028c8 <HAL_RCC_OscConfig+0x4c4>)
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f003 030c 	and.w	r3, r3, #12
 80027f4:	2b08      	cmp	r3, #8
 80027f6:	d061      	beq.n	80028bc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	69db      	ldr	r3, [r3, #28]
 80027fc:	2b02      	cmp	r3, #2
 80027fe:	d146      	bne.n	800288e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002800:	4b33      	ldr	r3, [pc, #204]	; (80028d0 <HAL_RCC_OscConfig+0x4cc>)
 8002802:	2200      	movs	r2, #0
 8002804:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002806:	f7fe fef7 	bl	80015f8 <HAL_GetTick>
 800280a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800280c:	e008      	b.n	8002820 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800280e:	f7fe fef3 	bl	80015f8 <HAL_GetTick>
 8002812:	4602      	mov	r2, r0
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	2b02      	cmp	r3, #2
 800281a:	d901      	bls.n	8002820 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800281c:	2303      	movs	r3, #3
 800281e:	e06d      	b.n	80028fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002820:	4b29      	ldr	r3, [pc, #164]	; (80028c8 <HAL_RCC_OscConfig+0x4c4>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002828:	2b00      	cmp	r3, #0
 800282a:	d1f0      	bne.n	800280e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6a1b      	ldr	r3, [r3, #32]
 8002830:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002834:	d108      	bne.n	8002848 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002836:	4b24      	ldr	r3, [pc, #144]	; (80028c8 <HAL_RCC_OscConfig+0x4c4>)
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	4921      	ldr	r1, [pc, #132]	; (80028c8 <HAL_RCC_OscConfig+0x4c4>)
 8002844:	4313      	orrs	r3, r2
 8002846:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002848:	4b1f      	ldr	r3, [pc, #124]	; (80028c8 <HAL_RCC_OscConfig+0x4c4>)
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6a19      	ldr	r1, [r3, #32]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002858:	430b      	orrs	r3, r1
 800285a:	491b      	ldr	r1, [pc, #108]	; (80028c8 <HAL_RCC_OscConfig+0x4c4>)
 800285c:	4313      	orrs	r3, r2
 800285e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002860:	4b1b      	ldr	r3, [pc, #108]	; (80028d0 <HAL_RCC_OscConfig+0x4cc>)
 8002862:	2201      	movs	r2, #1
 8002864:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002866:	f7fe fec7 	bl	80015f8 <HAL_GetTick>
 800286a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800286c:	e008      	b.n	8002880 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800286e:	f7fe fec3 	bl	80015f8 <HAL_GetTick>
 8002872:	4602      	mov	r2, r0
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	1ad3      	subs	r3, r2, r3
 8002878:	2b02      	cmp	r3, #2
 800287a:	d901      	bls.n	8002880 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800287c:	2303      	movs	r3, #3
 800287e:	e03d      	b.n	80028fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002880:	4b11      	ldr	r3, [pc, #68]	; (80028c8 <HAL_RCC_OscConfig+0x4c4>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002888:	2b00      	cmp	r3, #0
 800288a:	d0f0      	beq.n	800286e <HAL_RCC_OscConfig+0x46a>
 800288c:	e035      	b.n	80028fa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800288e:	4b10      	ldr	r3, [pc, #64]	; (80028d0 <HAL_RCC_OscConfig+0x4cc>)
 8002890:	2200      	movs	r2, #0
 8002892:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002894:	f7fe feb0 	bl	80015f8 <HAL_GetTick>
 8002898:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800289a:	e008      	b.n	80028ae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800289c:	f7fe feac 	bl	80015f8 <HAL_GetTick>
 80028a0:	4602      	mov	r2, r0
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	2b02      	cmp	r3, #2
 80028a8:	d901      	bls.n	80028ae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	e026      	b.n	80028fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028ae:	4b06      	ldr	r3, [pc, #24]	; (80028c8 <HAL_RCC_OscConfig+0x4c4>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d1f0      	bne.n	800289c <HAL_RCC_OscConfig+0x498>
 80028ba:	e01e      	b.n	80028fa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	69db      	ldr	r3, [r3, #28]
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d107      	bne.n	80028d4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e019      	b.n	80028fc <HAL_RCC_OscConfig+0x4f8>
 80028c8:	40021000 	.word	0x40021000
 80028cc:	40007000 	.word	0x40007000
 80028d0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80028d4:	4b0b      	ldr	r3, [pc, #44]	; (8002904 <HAL_RCC_OscConfig+0x500>)
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6a1b      	ldr	r3, [r3, #32]
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d106      	bne.n	80028f6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d001      	beq.n	80028fa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e000      	b.n	80028fc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80028fa:	2300      	movs	r3, #0
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	3718      	adds	r7, #24
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}
 8002904:	40021000 	.word	0x40021000

08002908 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b084      	sub	sp, #16
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
 8002910:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d101      	bne.n	800291c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	e0d0      	b.n	8002abe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800291c:	4b6a      	ldr	r3, [pc, #424]	; (8002ac8 <HAL_RCC_ClockConfig+0x1c0>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 0307 	and.w	r3, r3, #7
 8002924:	683a      	ldr	r2, [r7, #0]
 8002926:	429a      	cmp	r2, r3
 8002928:	d910      	bls.n	800294c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800292a:	4b67      	ldr	r3, [pc, #412]	; (8002ac8 <HAL_RCC_ClockConfig+0x1c0>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f023 0207 	bic.w	r2, r3, #7
 8002932:	4965      	ldr	r1, [pc, #404]	; (8002ac8 <HAL_RCC_ClockConfig+0x1c0>)
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	4313      	orrs	r3, r2
 8002938:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800293a:	4b63      	ldr	r3, [pc, #396]	; (8002ac8 <HAL_RCC_ClockConfig+0x1c0>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0307 	and.w	r3, r3, #7
 8002942:	683a      	ldr	r2, [r7, #0]
 8002944:	429a      	cmp	r2, r3
 8002946:	d001      	beq.n	800294c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e0b8      	b.n	8002abe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 0302 	and.w	r3, r3, #2
 8002954:	2b00      	cmp	r3, #0
 8002956:	d020      	beq.n	800299a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 0304 	and.w	r3, r3, #4
 8002960:	2b00      	cmp	r3, #0
 8002962:	d005      	beq.n	8002970 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002964:	4b59      	ldr	r3, [pc, #356]	; (8002acc <HAL_RCC_ClockConfig+0x1c4>)
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	4a58      	ldr	r2, [pc, #352]	; (8002acc <HAL_RCC_ClockConfig+0x1c4>)
 800296a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800296e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 0308 	and.w	r3, r3, #8
 8002978:	2b00      	cmp	r3, #0
 800297a:	d005      	beq.n	8002988 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800297c:	4b53      	ldr	r3, [pc, #332]	; (8002acc <HAL_RCC_ClockConfig+0x1c4>)
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	4a52      	ldr	r2, [pc, #328]	; (8002acc <HAL_RCC_ClockConfig+0x1c4>)
 8002982:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002986:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002988:	4b50      	ldr	r3, [pc, #320]	; (8002acc <HAL_RCC_ClockConfig+0x1c4>)
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	494d      	ldr	r1, [pc, #308]	; (8002acc <HAL_RCC_ClockConfig+0x1c4>)
 8002996:	4313      	orrs	r3, r2
 8002998:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 0301 	and.w	r3, r3, #1
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d040      	beq.n	8002a28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d107      	bne.n	80029be <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029ae:	4b47      	ldr	r3, [pc, #284]	; (8002acc <HAL_RCC_ClockConfig+0x1c4>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d115      	bne.n	80029e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e07f      	b.n	8002abe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d107      	bne.n	80029d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029c6:	4b41      	ldr	r3, [pc, #260]	; (8002acc <HAL_RCC_ClockConfig+0x1c4>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d109      	bne.n	80029e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e073      	b.n	8002abe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029d6:	4b3d      	ldr	r3, [pc, #244]	; (8002acc <HAL_RCC_ClockConfig+0x1c4>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 0302 	and.w	r3, r3, #2
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d101      	bne.n	80029e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e06b      	b.n	8002abe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029e6:	4b39      	ldr	r3, [pc, #228]	; (8002acc <HAL_RCC_ClockConfig+0x1c4>)
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	f023 0203 	bic.w	r2, r3, #3
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	4936      	ldr	r1, [pc, #216]	; (8002acc <HAL_RCC_ClockConfig+0x1c4>)
 80029f4:	4313      	orrs	r3, r2
 80029f6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029f8:	f7fe fdfe 	bl	80015f8 <HAL_GetTick>
 80029fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029fe:	e00a      	b.n	8002a16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a00:	f7fe fdfa 	bl	80015f8 <HAL_GetTick>
 8002a04:	4602      	mov	r2, r0
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d901      	bls.n	8002a16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	e053      	b.n	8002abe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a16:	4b2d      	ldr	r3, [pc, #180]	; (8002acc <HAL_RCC_ClockConfig+0x1c4>)
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	f003 020c 	and.w	r2, r3, #12
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d1eb      	bne.n	8002a00 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a28:	4b27      	ldr	r3, [pc, #156]	; (8002ac8 <HAL_RCC_ClockConfig+0x1c0>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 0307 	and.w	r3, r3, #7
 8002a30:	683a      	ldr	r2, [r7, #0]
 8002a32:	429a      	cmp	r2, r3
 8002a34:	d210      	bcs.n	8002a58 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a36:	4b24      	ldr	r3, [pc, #144]	; (8002ac8 <HAL_RCC_ClockConfig+0x1c0>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f023 0207 	bic.w	r2, r3, #7
 8002a3e:	4922      	ldr	r1, [pc, #136]	; (8002ac8 <HAL_RCC_ClockConfig+0x1c0>)
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	4313      	orrs	r3, r2
 8002a44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a46:	4b20      	ldr	r3, [pc, #128]	; (8002ac8 <HAL_RCC_ClockConfig+0x1c0>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0307 	and.w	r3, r3, #7
 8002a4e:	683a      	ldr	r2, [r7, #0]
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d001      	beq.n	8002a58 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	e032      	b.n	8002abe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0304 	and.w	r3, r3, #4
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d008      	beq.n	8002a76 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a64:	4b19      	ldr	r3, [pc, #100]	; (8002acc <HAL_RCC_ClockConfig+0x1c4>)
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	4916      	ldr	r1, [pc, #88]	; (8002acc <HAL_RCC_ClockConfig+0x1c4>)
 8002a72:	4313      	orrs	r3, r2
 8002a74:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0308 	and.w	r3, r3, #8
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d009      	beq.n	8002a96 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a82:	4b12      	ldr	r3, [pc, #72]	; (8002acc <HAL_RCC_ClockConfig+0x1c4>)
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	691b      	ldr	r3, [r3, #16]
 8002a8e:	00db      	lsls	r3, r3, #3
 8002a90:	490e      	ldr	r1, [pc, #56]	; (8002acc <HAL_RCC_ClockConfig+0x1c4>)
 8002a92:	4313      	orrs	r3, r2
 8002a94:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a96:	f000 f821 	bl	8002adc <HAL_RCC_GetSysClockFreq>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	4b0b      	ldr	r3, [pc, #44]	; (8002acc <HAL_RCC_ClockConfig+0x1c4>)
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	091b      	lsrs	r3, r3, #4
 8002aa2:	f003 030f 	and.w	r3, r3, #15
 8002aa6:	490a      	ldr	r1, [pc, #40]	; (8002ad0 <HAL_RCC_ClockConfig+0x1c8>)
 8002aa8:	5ccb      	ldrb	r3, [r1, r3]
 8002aaa:	fa22 f303 	lsr.w	r3, r2, r3
 8002aae:	4a09      	ldr	r2, [pc, #36]	; (8002ad4 <HAL_RCC_ClockConfig+0x1cc>)
 8002ab0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002ab2:	4b09      	ldr	r3, [pc, #36]	; (8002ad8 <HAL_RCC_ClockConfig+0x1d0>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f7fe fd5c 	bl	8001574 <HAL_InitTick>

  return HAL_OK;
 8002abc:	2300      	movs	r3, #0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3710      	adds	r7, #16
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	40022000 	.word	0x40022000
 8002acc:	40021000 	.word	0x40021000
 8002ad0:	0800330c 	.word	0x0800330c
 8002ad4:	20000000 	.word	0x20000000
 8002ad8:	20000004 	.word	0x20000004

08002adc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b087      	sub	sp, #28
 8002ae0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	60fb      	str	r3, [r7, #12]
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	60bb      	str	r3, [r7, #8]
 8002aea:	2300      	movs	r3, #0
 8002aec:	617b      	str	r3, [r7, #20]
 8002aee:	2300      	movs	r3, #0
 8002af0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002af2:	2300      	movs	r3, #0
 8002af4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002af6:	4b1e      	ldr	r3, [pc, #120]	; (8002b70 <HAL_RCC_GetSysClockFreq+0x94>)
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	f003 030c 	and.w	r3, r3, #12
 8002b02:	2b04      	cmp	r3, #4
 8002b04:	d002      	beq.n	8002b0c <HAL_RCC_GetSysClockFreq+0x30>
 8002b06:	2b08      	cmp	r3, #8
 8002b08:	d003      	beq.n	8002b12 <HAL_RCC_GetSysClockFreq+0x36>
 8002b0a:	e027      	b.n	8002b5c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002b0c:	4b19      	ldr	r3, [pc, #100]	; (8002b74 <HAL_RCC_GetSysClockFreq+0x98>)
 8002b0e:	613b      	str	r3, [r7, #16]
      break;
 8002b10:	e027      	b.n	8002b62 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	0c9b      	lsrs	r3, r3, #18
 8002b16:	f003 030f 	and.w	r3, r3, #15
 8002b1a:	4a17      	ldr	r2, [pc, #92]	; (8002b78 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002b1c:	5cd3      	ldrb	r3, [r2, r3]
 8002b1e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d010      	beq.n	8002b4c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002b2a:	4b11      	ldr	r3, [pc, #68]	; (8002b70 <HAL_RCC_GetSysClockFreq+0x94>)
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	0c5b      	lsrs	r3, r3, #17
 8002b30:	f003 0301 	and.w	r3, r3, #1
 8002b34:	4a11      	ldr	r2, [pc, #68]	; (8002b7c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002b36:	5cd3      	ldrb	r3, [r2, r3]
 8002b38:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4a0d      	ldr	r2, [pc, #52]	; (8002b74 <HAL_RCC_GetSysClockFreq+0x98>)
 8002b3e:	fb03 f202 	mul.w	r2, r3, r2
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b48:	617b      	str	r3, [r7, #20]
 8002b4a:	e004      	b.n	8002b56 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	4a0c      	ldr	r2, [pc, #48]	; (8002b80 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002b50:	fb02 f303 	mul.w	r3, r2, r3
 8002b54:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	613b      	str	r3, [r7, #16]
      break;
 8002b5a:	e002      	b.n	8002b62 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b5c:	4b05      	ldr	r3, [pc, #20]	; (8002b74 <HAL_RCC_GetSysClockFreq+0x98>)
 8002b5e:	613b      	str	r3, [r7, #16]
      break;
 8002b60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b62:	693b      	ldr	r3, [r7, #16]
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	371c      	adds	r7, #28
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bc80      	pop	{r7}
 8002b6c:	4770      	bx	lr
 8002b6e:	bf00      	nop
 8002b70:	40021000 	.word	0x40021000
 8002b74:	007a1200 	.word	0x007a1200
 8002b78:	08003324 	.word	0x08003324
 8002b7c:	08003334 	.word	0x08003334
 8002b80:	003d0900 	.word	0x003d0900

08002b84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b84:	b480      	push	{r7}
 8002b86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b88:	4b02      	ldr	r3, [pc, #8]	; (8002b94 <HAL_RCC_GetHCLKFreq+0x10>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bc80      	pop	{r7}
 8002b92:	4770      	bx	lr
 8002b94:	20000000 	.word	0x20000000

08002b98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b9c:	f7ff fff2 	bl	8002b84 <HAL_RCC_GetHCLKFreq>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	4b05      	ldr	r3, [pc, #20]	; (8002bb8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	0a1b      	lsrs	r3, r3, #8
 8002ba8:	f003 0307 	and.w	r3, r3, #7
 8002bac:	4903      	ldr	r1, [pc, #12]	; (8002bbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bae:	5ccb      	ldrb	r3, [r1, r3]
 8002bb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	bd80      	pop	{r7, pc}
 8002bb8:	40021000 	.word	0x40021000
 8002bbc:	0800331c 	.word	0x0800331c

08002bc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002bc4:	f7ff ffde 	bl	8002b84 <HAL_RCC_GetHCLKFreq>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	4b05      	ldr	r3, [pc, #20]	; (8002be0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	0adb      	lsrs	r3, r3, #11
 8002bd0:	f003 0307 	and.w	r3, r3, #7
 8002bd4:	4903      	ldr	r1, [pc, #12]	; (8002be4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002bd6:	5ccb      	ldrb	r3, [r1, r3]
 8002bd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	40021000 	.word	0x40021000
 8002be4:	0800331c 	.word	0x0800331c

08002be8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b085      	sub	sp, #20
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002bf0:	4b0a      	ldr	r3, [pc, #40]	; (8002c1c <RCC_Delay+0x34>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a0a      	ldr	r2, [pc, #40]	; (8002c20 <RCC_Delay+0x38>)
 8002bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8002bfa:	0a5b      	lsrs	r3, r3, #9
 8002bfc:	687a      	ldr	r2, [r7, #4]
 8002bfe:	fb02 f303 	mul.w	r3, r2, r3
 8002c02:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002c04:	bf00      	nop
  }
  while (Delay --);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	1e5a      	subs	r2, r3, #1
 8002c0a:	60fa      	str	r2, [r7, #12]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d1f9      	bne.n	8002c04 <RCC_Delay+0x1c>
}
 8002c10:	bf00      	nop
 8002c12:	bf00      	nop
 8002c14:	3714      	adds	r7, #20
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bc80      	pop	{r7}
 8002c1a:	4770      	bx	lr
 8002c1c:	20000000 	.word	0x20000000
 8002c20:	10624dd3 	.word	0x10624dd3

08002c24 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b086      	sub	sp, #24
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	613b      	str	r3, [r7, #16]
 8002c30:	2300      	movs	r3, #0
 8002c32:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0301 	and.w	r3, r3, #1
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d07d      	beq.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002c40:	2300      	movs	r3, #0
 8002c42:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c44:	4b4f      	ldr	r3, [pc, #316]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c46:	69db      	ldr	r3, [r3, #28]
 8002c48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d10d      	bne.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c50:	4b4c      	ldr	r3, [pc, #304]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c52:	69db      	ldr	r3, [r3, #28]
 8002c54:	4a4b      	ldr	r2, [pc, #300]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c5a:	61d3      	str	r3, [r2, #28]
 8002c5c:	4b49      	ldr	r3, [pc, #292]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c5e:	69db      	ldr	r3, [r3, #28]
 8002c60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c64:	60bb      	str	r3, [r7, #8]
 8002c66:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c6c:	4b46      	ldr	r3, [pc, #280]	; (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d118      	bne.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c78:	4b43      	ldr	r3, [pc, #268]	; (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a42      	ldr	r2, [pc, #264]	; (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c82:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c84:	f7fe fcb8 	bl	80015f8 <HAL_GetTick>
 8002c88:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c8a:	e008      	b.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c8c:	f7fe fcb4 	bl	80015f8 <HAL_GetTick>
 8002c90:	4602      	mov	r2, r0
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	2b64      	cmp	r3, #100	; 0x64
 8002c98:	d901      	bls.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	e06d      	b.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c9e:	4b3a      	ldr	r3, [pc, #232]	; (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d0f0      	beq.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002caa:	4b36      	ldr	r3, [pc, #216]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cac:	6a1b      	ldr	r3, [r3, #32]
 8002cae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cb2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d02e      	beq.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cc2:	68fa      	ldr	r2, [r7, #12]
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d027      	beq.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002cc8:	4b2e      	ldr	r3, [pc, #184]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cca:	6a1b      	ldr	r3, [r3, #32]
 8002ccc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cd0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002cd2:	4b2e      	ldr	r3, [pc, #184]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002cd8:	4b2c      	ldr	r3, [pc, #176]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002cda:	2200      	movs	r2, #0
 8002cdc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002cde:	4a29      	ldr	r2, [pc, #164]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	f003 0301 	and.w	r3, r3, #1
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d014      	beq.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cee:	f7fe fc83 	bl	80015f8 <HAL_GetTick>
 8002cf2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cf4:	e00a      	b.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cf6:	f7fe fc7f 	bl	80015f8 <HAL_GetTick>
 8002cfa:	4602      	mov	r2, r0
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	1ad3      	subs	r3, r2, r3
 8002d00:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d901      	bls.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002d08:	2303      	movs	r3, #3
 8002d0a:	e036      	b.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d0c:	4b1d      	ldr	r3, [pc, #116]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d0e:	6a1b      	ldr	r3, [r3, #32]
 8002d10:	f003 0302 	and.w	r3, r3, #2
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d0ee      	beq.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d18:	4b1a      	ldr	r3, [pc, #104]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d1a:	6a1b      	ldr	r3, [r3, #32]
 8002d1c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	4917      	ldr	r1, [pc, #92]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d26:	4313      	orrs	r3, r2
 8002d28:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002d2a:	7dfb      	ldrb	r3, [r7, #23]
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d105      	bne.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d30:	4b14      	ldr	r3, [pc, #80]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d32:	69db      	ldr	r3, [r3, #28]
 8002d34:	4a13      	ldr	r2, [pc, #76]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d3a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 0302 	and.w	r3, r3, #2
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d008      	beq.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002d48:	4b0e      	ldr	r3, [pc, #56]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	490b      	ldr	r1, [pc, #44]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d56:	4313      	orrs	r3, r2
 8002d58:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 0310 	and.w	r3, r3, #16
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d008      	beq.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d66:	4b07      	ldr	r3, [pc, #28]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	68db      	ldr	r3, [r3, #12]
 8002d72:	4904      	ldr	r1, [pc, #16]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d74:	4313      	orrs	r3, r2
 8002d76:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002d78:	2300      	movs	r3, #0
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3718      	adds	r7, #24
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	40021000 	.word	0x40021000
 8002d88:	40007000 	.word	0x40007000
 8002d8c:	42420440 	.word	0x42420440

08002d90 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b088      	sub	sp, #32
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	617b      	str	r3, [r7, #20]
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	61fb      	str	r3, [r7, #28]
 8002da0:	2300      	movs	r3, #0
 8002da2:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002da4:	2300      	movs	r3, #0
 8002da6:	60fb      	str	r3, [r7, #12]
 8002da8:	2300      	movs	r3, #0
 8002daa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2b10      	cmp	r3, #16
 8002db0:	d00a      	beq.n	8002dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2b10      	cmp	r3, #16
 8002db6:	f200 808a 	bhi.w	8002ece <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d045      	beq.n	8002e4c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2b02      	cmp	r3, #2
 8002dc4:	d075      	beq.n	8002eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002dc6:	e082      	b.n	8002ece <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8002dc8:	4b46      	ldr	r3, [pc, #280]	; (8002ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002dce:	4b45      	ldr	r3, [pc, #276]	; (8002ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d07b      	beq.n	8002ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	0c9b      	lsrs	r3, r3, #18
 8002dde:	f003 030f 	and.w	r3, r3, #15
 8002de2:	4a41      	ldr	r2, [pc, #260]	; (8002ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8002de4:	5cd3      	ldrb	r3, [r2, r3]
 8002de6:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d015      	beq.n	8002e1e <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002df2:	4b3c      	ldr	r3, [pc, #240]	; (8002ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	0c5b      	lsrs	r3, r3, #17
 8002df8:	f003 0301 	and.w	r3, r3, #1
 8002dfc:	4a3b      	ldr	r2, [pc, #236]	; (8002eec <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8002dfe:	5cd3      	ldrb	r3, [r2, r3]
 8002e00:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d00d      	beq.n	8002e28 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002e0c:	4a38      	ldr	r2, [pc, #224]	; (8002ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	fb02 f303 	mul.w	r3, r2, r3
 8002e1a:	61fb      	str	r3, [r7, #28]
 8002e1c:	e004      	b.n	8002e28 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	4a34      	ldr	r2, [pc, #208]	; (8002ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8002e22:	fb02 f303 	mul.w	r3, r2, r3
 8002e26:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002e28:	4b2e      	ldr	r3, [pc, #184]	; (8002ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e34:	d102      	bne.n	8002e3c <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	61bb      	str	r3, [r7, #24]
      break;
 8002e3a:	e04a      	b.n	8002ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8002e3c:	69fb      	ldr	r3, [r7, #28]
 8002e3e:	005b      	lsls	r3, r3, #1
 8002e40:	4a2d      	ldr	r2, [pc, #180]	; (8002ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002e42:	fba2 2303 	umull	r2, r3, r2, r3
 8002e46:	085b      	lsrs	r3, r3, #1
 8002e48:	61bb      	str	r3, [r7, #24]
      break;
 8002e4a:	e042      	b.n	8002ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8002e4c:	4b25      	ldr	r3, [pc, #148]	; (8002ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002e4e:	6a1b      	ldr	r3, [r3, #32]
 8002e50:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e5c:	d108      	bne.n	8002e70 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	f003 0302 	and.w	r3, r3, #2
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d003      	beq.n	8002e70 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8002e68:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e6c:	61bb      	str	r3, [r7, #24]
 8002e6e:	e01f      	b.n	8002eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e7a:	d109      	bne.n	8002e90 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8002e7c:	4b19      	ldr	r3, [pc, #100]	; (8002ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e80:	f003 0302 	and.w	r3, r3, #2
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d003      	beq.n	8002e90 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8002e88:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002e8c:	61bb      	str	r3, [r7, #24]
 8002e8e:	e00f      	b.n	8002eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e96:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e9a:	d11c      	bne.n	8002ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002e9c:	4b11      	ldr	r3, [pc, #68]	; (8002ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d016      	beq.n	8002ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8002ea8:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002eac:	61bb      	str	r3, [r7, #24]
      break;
 8002eae:	e012      	b.n	8002ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002eb0:	e011      	b.n	8002ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002eb2:	f7ff fe85 	bl	8002bc0 <HAL_RCC_GetPCLK2Freq>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	4b0a      	ldr	r3, [pc, #40]	; (8002ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	0b9b      	lsrs	r3, r3, #14
 8002ebe:	f003 0303 	and.w	r3, r3, #3
 8002ec2:	3301      	adds	r3, #1
 8002ec4:	005b      	lsls	r3, r3, #1
 8002ec6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eca:	61bb      	str	r3, [r7, #24]
      break;
 8002ecc:	e004      	b.n	8002ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002ece:	bf00      	nop
 8002ed0:	e002      	b.n	8002ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002ed2:	bf00      	nop
 8002ed4:	e000      	b.n	8002ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002ed6:	bf00      	nop
    }
  }
  return (frequency);
 8002ed8:	69bb      	ldr	r3, [r7, #24]
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3720      	adds	r7, #32
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	40021000 	.word	0x40021000
 8002ee8:	08003338 	.word	0x08003338
 8002eec:	08003348 	.word	0x08003348
 8002ef0:	007a1200 	.word	0x007a1200
 8002ef4:	003d0900 	.word	0x003d0900
 8002ef8:	aaaaaaab 	.word	0xaaaaaaab

08002efc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b082      	sub	sp, #8
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d101      	bne.n	8002f0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e042      	b.n	8002f94 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d106      	bne.n	8002f28 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f7fe fa72 	bl	800140c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2224      	movs	r2, #36	; 0x24
 8002f2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	68da      	ldr	r2, [r3, #12]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f3e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	f000 f91d 	bl	8003180 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	691a      	ldr	r2, [r3, #16]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f54:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	695a      	ldr	r2, [r3, #20]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f64:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	68da      	ldr	r2, [r3, #12]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f74:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2220      	movs	r2, #32
 8002f80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2220      	movs	r2, #32
 8002f88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002f92:	2300      	movs	r3, #0
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3708      	adds	r7, #8
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}

08002f9c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b08a      	sub	sp, #40	; 0x28
 8002fa0:	af02      	add	r7, sp, #8
 8002fa2:	60f8      	str	r0, [r7, #12]
 8002fa4:	60b9      	str	r1, [r7, #8]
 8002fa6:	603b      	str	r3, [r7, #0]
 8002fa8:	4613      	mov	r3, r2
 8002faa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002fac:	2300      	movs	r3, #0
 8002fae:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	2b20      	cmp	r3, #32
 8002fba:	d16d      	bne.n	8003098 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d002      	beq.n	8002fc8 <HAL_UART_Transmit+0x2c>
 8002fc2:	88fb      	ldrh	r3, [r7, #6]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d101      	bne.n	8002fcc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e066      	b.n	800309a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2221      	movs	r2, #33	; 0x21
 8002fd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002fda:	f7fe fb0d 	bl	80015f8 <HAL_GetTick>
 8002fde:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	88fa      	ldrh	r2, [r7, #6]
 8002fe4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	88fa      	ldrh	r2, [r7, #6]
 8002fea:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ff4:	d108      	bne.n	8003008 <HAL_UART_Transmit+0x6c>
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	691b      	ldr	r3, [r3, #16]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d104      	bne.n	8003008 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002ffe:	2300      	movs	r3, #0
 8003000:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	61bb      	str	r3, [r7, #24]
 8003006:	e003      	b.n	8003010 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800300c:	2300      	movs	r3, #0
 800300e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003010:	e02a      	b.n	8003068 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	9300      	str	r3, [sp, #0]
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	2200      	movs	r2, #0
 800301a:	2180      	movs	r1, #128	; 0x80
 800301c:	68f8      	ldr	r0, [r7, #12]
 800301e:	f000 f840 	bl	80030a2 <UART_WaitOnFlagUntilTimeout>
 8003022:	4603      	mov	r3, r0
 8003024:	2b00      	cmp	r3, #0
 8003026:	d001      	beq.n	800302c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003028:	2303      	movs	r3, #3
 800302a:	e036      	b.n	800309a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d10b      	bne.n	800304a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003032:	69bb      	ldr	r3, [r7, #24]
 8003034:	881b      	ldrh	r3, [r3, #0]
 8003036:	461a      	mov	r2, r3
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003040:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003042:	69bb      	ldr	r3, [r7, #24]
 8003044:	3302      	adds	r3, #2
 8003046:	61bb      	str	r3, [r7, #24]
 8003048:	e007      	b.n	800305a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	781a      	ldrb	r2, [r3, #0]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	3301      	adds	r3, #1
 8003058:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800305e:	b29b      	uxth	r3, r3
 8003060:	3b01      	subs	r3, #1
 8003062:	b29a      	uxth	r2, r3
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800306c:	b29b      	uxth	r3, r3
 800306e:	2b00      	cmp	r3, #0
 8003070:	d1cf      	bne.n	8003012 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	9300      	str	r3, [sp, #0]
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	2200      	movs	r2, #0
 800307a:	2140      	movs	r1, #64	; 0x40
 800307c:	68f8      	ldr	r0, [r7, #12]
 800307e:	f000 f810 	bl	80030a2 <UART_WaitOnFlagUntilTimeout>
 8003082:	4603      	mov	r3, r0
 8003084:	2b00      	cmp	r3, #0
 8003086:	d001      	beq.n	800308c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003088:	2303      	movs	r3, #3
 800308a:	e006      	b.n	800309a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2220      	movs	r2, #32
 8003090:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003094:	2300      	movs	r3, #0
 8003096:	e000      	b.n	800309a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003098:	2302      	movs	r3, #2
  }
}
 800309a:	4618      	mov	r0, r3
 800309c:	3720      	adds	r7, #32
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}

080030a2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80030a2:	b580      	push	{r7, lr}
 80030a4:	b090      	sub	sp, #64	; 0x40
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	60f8      	str	r0, [r7, #12]
 80030aa:	60b9      	str	r1, [r7, #8]
 80030ac:	603b      	str	r3, [r7, #0]
 80030ae:	4613      	mov	r3, r2
 80030b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030b2:	e050      	b.n	8003156 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030ba:	d04c      	beq.n	8003156 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80030bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d007      	beq.n	80030d2 <UART_WaitOnFlagUntilTimeout+0x30>
 80030c2:	f7fe fa99 	bl	80015f8 <HAL_GetTick>
 80030c6:	4602      	mov	r2, r0
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	1ad3      	subs	r3, r2, r3
 80030cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d241      	bcs.n	8003156 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	330c      	adds	r3, #12
 80030d8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030dc:	e853 3f00 	ldrex	r3, [r3]
 80030e0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80030e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80030e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	330c      	adds	r3, #12
 80030f0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80030f2:	637a      	str	r2, [r7, #52]	; 0x34
 80030f4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030f6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80030f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80030fa:	e841 2300 	strex	r3, r2, [r1]
 80030fe:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003102:	2b00      	cmp	r3, #0
 8003104:	d1e5      	bne.n	80030d2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	3314      	adds	r3, #20
 800310c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	e853 3f00 	ldrex	r3, [r3]
 8003114:	613b      	str	r3, [r7, #16]
   return(result);
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	f023 0301 	bic.w	r3, r3, #1
 800311c:	63bb      	str	r3, [r7, #56]	; 0x38
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	3314      	adds	r3, #20
 8003124:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003126:	623a      	str	r2, [r7, #32]
 8003128:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800312a:	69f9      	ldr	r1, [r7, #28]
 800312c:	6a3a      	ldr	r2, [r7, #32]
 800312e:	e841 2300 	strex	r3, r2, [r1]
 8003132:	61bb      	str	r3, [r7, #24]
   return(result);
 8003134:	69bb      	ldr	r3, [r7, #24]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d1e5      	bne.n	8003106 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2220      	movs	r2, #32
 800313e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2220      	movs	r2, #32
 8003146:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2200      	movs	r2, #0
 800314e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	e00f      	b.n	8003176 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	4013      	ands	r3, r2
 8003160:	68ba      	ldr	r2, [r7, #8]
 8003162:	429a      	cmp	r2, r3
 8003164:	bf0c      	ite	eq
 8003166:	2301      	moveq	r3, #1
 8003168:	2300      	movne	r3, #0
 800316a:	b2db      	uxtb	r3, r3
 800316c:	461a      	mov	r2, r3
 800316e:	79fb      	ldrb	r3, [r7, #7]
 8003170:	429a      	cmp	r2, r3
 8003172:	d09f      	beq.n	80030b4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003174:	2300      	movs	r3, #0
}
 8003176:	4618      	mov	r0, r3
 8003178:	3740      	adds	r7, #64	; 0x40
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
	...

08003180 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b084      	sub	sp, #16
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	691b      	ldr	r3, [r3, #16]
 800318e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	68da      	ldr	r2, [r3, #12]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	430a      	orrs	r2, r1
 800319c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	689a      	ldr	r2, [r3, #8]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	691b      	ldr	r3, [r3, #16]
 80031a6:	431a      	orrs	r2, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	695b      	ldr	r3, [r3, #20]
 80031ac:	4313      	orrs	r3, r2
 80031ae:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	68db      	ldr	r3, [r3, #12]
 80031b6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80031ba:	f023 030c 	bic.w	r3, r3, #12
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	6812      	ldr	r2, [r2, #0]
 80031c2:	68b9      	ldr	r1, [r7, #8]
 80031c4:	430b      	orrs	r3, r1
 80031c6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	695b      	ldr	r3, [r3, #20]
 80031ce:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	699a      	ldr	r2, [r3, #24]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	430a      	orrs	r2, r1
 80031dc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a2c      	ldr	r2, [pc, #176]	; (8003294 <UART_SetConfig+0x114>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d103      	bne.n	80031f0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80031e8:	f7ff fcea 	bl	8002bc0 <HAL_RCC_GetPCLK2Freq>
 80031ec:	60f8      	str	r0, [r7, #12]
 80031ee:	e002      	b.n	80031f6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80031f0:	f7ff fcd2 	bl	8002b98 <HAL_RCC_GetPCLK1Freq>
 80031f4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80031f6:	68fa      	ldr	r2, [r7, #12]
 80031f8:	4613      	mov	r3, r2
 80031fa:	009b      	lsls	r3, r3, #2
 80031fc:	4413      	add	r3, r2
 80031fe:	009a      	lsls	r2, r3, #2
 8003200:	441a      	add	r2, r3
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	fbb2 f3f3 	udiv	r3, r2, r3
 800320c:	4a22      	ldr	r2, [pc, #136]	; (8003298 <UART_SetConfig+0x118>)
 800320e:	fba2 2303 	umull	r2, r3, r2, r3
 8003212:	095b      	lsrs	r3, r3, #5
 8003214:	0119      	lsls	r1, r3, #4
 8003216:	68fa      	ldr	r2, [r7, #12]
 8003218:	4613      	mov	r3, r2
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	4413      	add	r3, r2
 800321e:	009a      	lsls	r2, r3, #2
 8003220:	441a      	add	r2, r3
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	fbb2 f2f3 	udiv	r2, r2, r3
 800322c:	4b1a      	ldr	r3, [pc, #104]	; (8003298 <UART_SetConfig+0x118>)
 800322e:	fba3 0302 	umull	r0, r3, r3, r2
 8003232:	095b      	lsrs	r3, r3, #5
 8003234:	2064      	movs	r0, #100	; 0x64
 8003236:	fb00 f303 	mul.w	r3, r0, r3
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	011b      	lsls	r3, r3, #4
 800323e:	3332      	adds	r3, #50	; 0x32
 8003240:	4a15      	ldr	r2, [pc, #84]	; (8003298 <UART_SetConfig+0x118>)
 8003242:	fba2 2303 	umull	r2, r3, r2, r3
 8003246:	095b      	lsrs	r3, r3, #5
 8003248:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800324c:	4419      	add	r1, r3
 800324e:	68fa      	ldr	r2, [r7, #12]
 8003250:	4613      	mov	r3, r2
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	4413      	add	r3, r2
 8003256:	009a      	lsls	r2, r3, #2
 8003258:	441a      	add	r2, r3
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	fbb2 f2f3 	udiv	r2, r2, r3
 8003264:	4b0c      	ldr	r3, [pc, #48]	; (8003298 <UART_SetConfig+0x118>)
 8003266:	fba3 0302 	umull	r0, r3, r3, r2
 800326a:	095b      	lsrs	r3, r3, #5
 800326c:	2064      	movs	r0, #100	; 0x64
 800326e:	fb00 f303 	mul.w	r3, r0, r3
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	011b      	lsls	r3, r3, #4
 8003276:	3332      	adds	r3, #50	; 0x32
 8003278:	4a07      	ldr	r2, [pc, #28]	; (8003298 <UART_SetConfig+0x118>)
 800327a:	fba2 2303 	umull	r2, r3, r2, r3
 800327e:	095b      	lsrs	r3, r3, #5
 8003280:	f003 020f 	and.w	r2, r3, #15
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	440a      	add	r2, r1
 800328a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800328c:	bf00      	nop
 800328e:	3710      	adds	r7, #16
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}
 8003294:	40013800 	.word	0x40013800
 8003298:	51eb851f 	.word	0x51eb851f

0800329c <memset>:
 800329c:	4603      	mov	r3, r0
 800329e:	4402      	add	r2, r0
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d100      	bne.n	80032a6 <memset+0xa>
 80032a4:	4770      	bx	lr
 80032a6:	f803 1b01 	strb.w	r1, [r3], #1
 80032aa:	e7f9      	b.n	80032a0 <memset+0x4>

080032ac <__libc_init_array>:
 80032ac:	b570      	push	{r4, r5, r6, lr}
 80032ae:	2600      	movs	r6, #0
 80032b0:	4d0c      	ldr	r5, [pc, #48]	; (80032e4 <__libc_init_array+0x38>)
 80032b2:	4c0d      	ldr	r4, [pc, #52]	; (80032e8 <__libc_init_array+0x3c>)
 80032b4:	1b64      	subs	r4, r4, r5
 80032b6:	10a4      	asrs	r4, r4, #2
 80032b8:	42a6      	cmp	r6, r4
 80032ba:	d109      	bne.n	80032d0 <__libc_init_array+0x24>
 80032bc:	f000 f81a 	bl	80032f4 <_init>
 80032c0:	2600      	movs	r6, #0
 80032c2:	4d0a      	ldr	r5, [pc, #40]	; (80032ec <__libc_init_array+0x40>)
 80032c4:	4c0a      	ldr	r4, [pc, #40]	; (80032f0 <__libc_init_array+0x44>)
 80032c6:	1b64      	subs	r4, r4, r5
 80032c8:	10a4      	asrs	r4, r4, #2
 80032ca:	42a6      	cmp	r6, r4
 80032cc:	d105      	bne.n	80032da <__libc_init_array+0x2e>
 80032ce:	bd70      	pop	{r4, r5, r6, pc}
 80032d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80032d4:	4798      	blx	r3
 80032d6:	3601      	adds	r6, #1
 80032d8:	e7ee      	b.n	80032b8 <__libc_init_array+0xc>
 80032da:	f855 3b04 	ldr.w	r3, [r5], #4
 80032de:	4798      	blx	r3
 80032e0:	3601      	adds	r6, #1
 80032e2:	e7f2      	b.n	80032ca <__libc_init_array+0x1e>
 80032e4:	0800334c 	.word	0x0800334c
 80032e8:	0800334c 	.word	0x0800334c
 80032ec:	0800334c 	.word	0x0800334c
 80032f0:	08003350 	.word	0x08003350

080032f4 <_init>:
 80032f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032f6:	bf00      	nop
 80032f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032fa:	bc08      	pop	{r3}
 80032fc:	469e      	mov	lr, r3
 80032fe:	4770      	bx	lr

08003300 <_fini>:
 8003300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003302:	bf00      	nop
 8003304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003306:	bc08      	pop	{r3}
 8003308:	469e      	mov	lr, r3
 800330a:	4770      	bx	lr
